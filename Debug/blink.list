
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000244c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800250c  0800250c  0000350c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002528  08002528  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002528  08002528  00003528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002530  08002530  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002530  08002530  00003530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002534  08002534  00003534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002538  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  08002544  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002544  000040a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a80  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae8  00000000  00000000  0000cab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000938  00000000  00000000  0000e5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000070d  00000000  00000000  0000eed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001279c  00000000  00000000  0000f5e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c76a  00000000  00000000  00021d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007292d  00000000  00000000  0002e4eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0e18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020a0  00000000  00000000  000a0e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000a2efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024f4 	.word	0x080024f4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080024f4 	.word	0x080024f4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	@ (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	@ (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			@ (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			@ (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4699      	mov	r9, r3
 8000266:	0c03      	lsrs	r3, r0, #16
 8000268:	469c      	mov	ip, r3
 800026a:	0413      	lsls	r3, r2, #16
 800026c:	4647      	mov	r7, r8
 800026e:	0c1b      	lsrs	r3, r3, #16
 8000270:	001d      	movs	r5, r3
 8000272:	000e      	movs	r6, r1
 8000274:	4661      	mov	r1, ip
 8000276:	0404      	lsls	r4, r0, #16
 8000278:	0c24      	lsrs	r4, r4, #16
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	0c10      	lsrs	r0, r2, #16
 8000280:	434b      	muls	r3, r1
 8000282:	4365      	muls	r5, r4
 8000284:	4341      	muls	r1, r0
 8000286:	4360      	muls	r0, r4
 8000288:	0c2c      	lsrs	r4, r5, #16
 800028a:	18c0      	adds	r0, r0, r3
 800028c:	1824      	adds	r4, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	42a3      	cmp	r3, r4
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	@ 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4356      	muls	r6, r2
 80002a2:	0c23      	lsrs	r3, r4, #16
 80002a4:	042d      	lsls	r5, r5, #16
 80002a6:	0c2d      	lsrs	r5, r5, #16
 80002a8:	1989      	adds	r1, r1, r6
 80002aa:	4463      	add	r3, ip
 80002ac:	0424      	lsls	r4, r4, #16
 80002ae:	1960      	adds	r0, r4, r5
 80002b0:	18c9      	adds	r1, r1, r3
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			@ (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	d434      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f2:	469b      	mov	fp, r3
 80002f4:	4653      	mov	r3, sl
 80002f6:	465a      	mov	r2, fp
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83b      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e079      	b.n	8000402 <__udivmoddi4+0x146>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e076      	b.n	8000408 <__udivmoddi4+0x14c>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e029      	b.n	8000388 <__udivmoddi4+0xcc>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	469b      	mov	fp, r3
 8000360:	2320      	movs	r3, #32
 8000362:	1a9b      	subs	r3, r3, r2
 8000364:	4652      	mov	r2, sl
 8000366:	40da      	lsrs	r2, r3
 8000368:	4641      	mov	r1, r8
 800036a:	0013      	movs	r3, r2
 800036c:	464a      	mov	r2, r9
 800036e:	408a      	lsls	r2, r1
 8000370:	0017      	movs	r7, r2
 8000372:	4642      	mov	r2, r8
 8000374:	431f      	orrs	r7, r3
 8000376:	4653      	mov	r3, sl
 8000378:	4093      	lsls	r3, r2
 800037a:	001e      	movs	r6, r3
 800037c:	42af      	cmp	r7, r5
 800037e:	d9c3      	bls.n	8000308 <__udivmoddi4+0x4c>
 8000380:	2200      	movs	r2, #0
 8000382:	2300      	movs	r3, #0
 8000384:	9200      	str	r2, [sp, #0]
 8000386:	9301      	str	r3, [sp, #4]
 8000388:	4643      	mov	r3, r8
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0d8      	beq.n	8000340 <__udivmoddi4+0x84>
 800038e:	07fb      	lsls	r3, r7, #31
 8000390:	0872      	lsrs	r2, r6, #1
 8000392:	431a      	orrs	r2, r3
 8000394:	4646      	mov	r6, r8
 8000396:	087b      	lsrs	r3, r7, #1
 8000398:	e00e      	b.n	80003b8 <__udivmoddi4+0xfc>
 800039a:	42ab      	cmp	r3, r5
 800039c:	d101      	bne.n	80003a2 <__udivmoddi4+0xe6>
 800039e:	42a2      	cmp	r2, r4
 80003a0:	d80c      	bhi.n	80003bc <__udivmoddi4+0x100>
 80003a2:	1aa4      	subs	r4, r4, r2
 80003a4:	419d      	sbcs	r5, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	1924      	adds	r4, r4, r4
 80003aa:	416d      	adcs	r5, r5
 80003ac:	2100      	movs	r1, #0
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1824      	adds	r4, r4, r0
 80003b2:	414d      	adcs	r5, r1
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d006      	beq.n	80003c6 <__udivmoddi4+0x10a>
 80003b8:	42ab      	cmp	r3, r5
 80003ba:	d9ee      	bls.n	800039a <__udivmoddi4+0xde>
 80003bc:	3e01      	subs	r6, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d1f8      	bne.n	80003b8 <__udivmoddi4+0xfc>
 80003c6:	9800      	ldr	r0, [sp, #0]
 80003c8:	9901      	ldr	r1, [sp, #4]
 80003ca:	465b      	mov	r3, fp
 80003cc:	1900      	adds	r0, r0, r4
 80003ce:	4169      	adcs	r1, r5
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	db24      	blt.n	800041e <__udivmoddi4+0x162>
 80003d4:	002b      	movs	r3, r5
 80003d6:	465a      	mov	r2, fp
 80003d8:	4644      	mov	r4, r8
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	002a      	movs	r2, r5
 80003de:	40e2      	lsrs	r2, r4
 80003e0:	001c      	movs	r4, r3
 80003e2:	465b      	mov	r3, fp
 80003e4:	0015      	movs	r5, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db2a      	blt.n	8000440 <__udivmoddi4+0x184>
 80003ea:	0026      	movs	r6, r4
 80003ec:	409e      	lsls	r6, r3
 80003ee:	0033      	movs	r3, r6
 80003f0:	0026      	movs	r6, r4
 80003f2:	4647      	mov	r7, r8
 80003f4:	40be      	lsls	r6, r7
 80003f6:	0032      	movs	r2, r6
 80003f8:	1a80      	subs	r0, r0, r2
 80003fa:	4199      	sbcs	r1, r3
 80003fc:	9000      	str	r0, [sp, #0]
 80003fe:	9101      	str	r1, [sp, #4]
 8000400:	e79e      	b.n	8000340 <__udivmoddi4+0x84>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d8bc      	bhi.n	8000380 <__udivmoddi4+0xc4>
 8000406:	e782      	b.n	800030e <__udivmoddi4+0x52>
 8000408:	4642      	mov	r2, r8
 800040a:	2320      	movs	r3, #32
 800040c:	2100      	movs	r1, #0
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	9100      	str	r1, [sp, #0]
 8000414:	9201      	str	r2, [sp, #4]
 8000416:	2201      	movs	r2, #1
 8000418:	40da      	lsrs	r2, r3
 800041a:	9201      	str	r2, [sp, #4]
 800041c:	e785      	b.n	800032a <__udivmoddi4+0x6e>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	4646      	mov	r6, r8
 8000428:	409a      	lsls	r2, r3
 800042a:	0023      	movs	r3, r4
 800042c:	40f3      	lsrs	r3, r6
 800042e:	4644      	mov	r4, r8
 8000430:	4313      	orrs	r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	40e2      	lsrs	r2, r4
 8000436:	001c      	movs	r4, r3
 8000438:	465b      	mov	r3, fp
 800043a:	0015      	movs	r5, r2
 800043c:	2b00      	cmp	r3, #0
 800043e:	dad4      	bge.n	80003ea <__udivmoddi4+0x12e>
 8000440:	4642      	mov	r2, r8
 8000442:	002f      	movs	r7, r5
 8000444:	2320      	movs	r3, #32
 8000446:	0026      	movs	r6, r4
 8000448:	4097      	lsls	r7, r2
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	40de      	lsrs	r6, r3
 800044e:	003b      	movs	r3, r7
 8000450:	4333      	orrs	r3, r6
 8000452:	e7cd      	b.n	80003f0 <__udivmoddi4+0x134>

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	@ (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			@ (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b084      	sub	sp, #16
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ae:	f000 fac3 	bl	8000a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b2:	f000 f82f 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b6:	f000 f915 	bl	80006e4 <MX_GPIO_Init>
  MX_RTC_Init();
 80004ba:	f000 f8df 	bl	800067c <MX_RTC_Init>
  MX_I2C3_Init();
 80004be:	f000 f89d 	bl	80005fc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
	/* Check and handle if the system was resumed from StandBy mode */
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80004c2:	4b12      	ldr	r3, [pc, #72]	@ (800050c <main+0x64>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	2202      	movs	r2, #2
 80004c8:	4013      	ands	r3, r2
 80004ca:	2b02      	cmp	r3, #2
 80004cc:	d105      	bne.n	80004da <main+0x32>
		/* Clear Standby flag */
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);
 80004ce:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <main+0x64>)
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	4b0e      	ldr	r3, [pc, #56]	@ (800050c <main+0x64>)
 80004d4:	2108      	movs	r1, #8
 80004d6:	430a      	orrs	r2, r1
 80004d8:	601a      	str	r2, [r3, #0]
	}
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80004da:	4b0c      	ldr	r3, [pc, #48]	@ (800050c <main+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	4b0b      	ldr	r3, [pc, #44]	@ (800050c <main+0x64>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	430a      	orrs	r2, r1
 80004e4:	601a      	str	r2, [r3, #0]
//		HAL_UART_Transmit(&huart2, buf, strlen((char*) buf), HAL_MAX_DELAY);
//
//		// Wait
//		HAL_Delay(500);

		HAL_Delay(200);
 80004e6:	20c8      	movs	r0, #200	@ 0xc8
 80004e8:	f000 fb16 	bl	8000b18 <HAL_Delay>
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 80004ec:	2380      	movs	r3, #128	@ 0x80
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	4807      	ldr	r0, [pc, #28]	@ (8000510 <main+0x68>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	0019      	movs	r1, r3
 80004f6:	f000 fd8f 	bl	8001018 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(HIGH_POWER_GPIO_Port, HIGH_POWER_Pin, GPIO_PIN_SET);
 80004fa:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <main+0x68>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	2108      	movs	r1, #8
 8000500:	0018      	movs	r0, r3
 8000502:	f000 fd89 	bl	8001018 <HAL_GPIO_WritePin>
		HAL_Delay(200);
 8000506:	46c0      	nop			@ (mov r8, r8)
 8000508:	e7ed      	b.n	80004e6 <main+0x3e>
 800050a:	46c0      	nop			@ (mov r8, r8)
 800050c:	40007000 	.word	0x40007000
 8000510:	50000800 	.word	0x50000800

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b590      	push	{r4, r7, lr}
 8000516:	b09b      	sub	sp, #108	@ 0x6c
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	2434      	movs	r4, #52	@ 0x34
 800051c:	193b      	adds	r3, r7, r4
 800051e:	0018      	movs	r0, r3
 8000520:	2334      	movs	r3, #52	@ 0x34
 8000522:	001a      	movs	r2, r3
 8000524:	2100      	movs	r1, #0
 8000526:	f001 ffb9 	bl	800249c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052a:	2320      	movs	r3, #32
 800052c:	18fb      	adds	r3, r7, r3
 800052e:	0018      	movs	r0, r3
 8000530:	2314      	movs	r3, #20
 8000532:	001a      	movs	r2, r3
 8000534:	2100      	movs	r1, #0
 8000536:	f001 ffb1 	bl	800249c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800053a:	003b      	movs	r3, r7
 800053c:	0018      	movs	r0, r3
 800053e:	2320      	movs	r3, #32
 8000540:	001a      	movs	r2, r3
 8000542:	2100      	movs	r1, #0
 8000544:	f001 ffaa 	bl	800249c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	4b2a      	ldr	r3, [pc, #168]	@ (80005f4 <SystemClock_Config+0xe0>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	4a2a      	ldr	r2, [pc, #168]	@ (80005f8 <SystemClock_Config+0xe4>)
 800054e:	401a      	ands	r2, r3
 8000550:	4b28      	ldr	r3, [pc, #160]	@ (80005f4 <SystemClock_Config+0xe0>)
 8000552:	2180      	movs	r1, #128	@ 0x80
 8000554:	0109      	lsls	r1, r1, #4
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 800055a:	0021      	movs	r1, r4
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2218      	movs	r2, #24
 8000560:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2201      	movs	r2, #1
 8000566:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	22a0      	movs	r2, #160	@ 0xa0
 8000578:	0212      	lsls	r2, r2, #8
 800057a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000582:	187b      	adds	r3, r7, r1
 8000584:	0018      	movs	r0, r3
 8000586:	f000 fe93 	bl	80012b0 <HAL_RCC_OscConfig>
 800058a:	1e03      	subs	r3, r0, #0
 800058c:	d001      	beq.n	8000592 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800058e:	f000 f97f 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000592:	2120      	movs	r1, #32
 8000594:	187b      	adds	r3, r7, r1
 8000596:	220f      	movs	r2, #15
 8000598:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	187b      	adds	r3, r7, r1
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2100      	movs	r1, #0
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f9f6 	bl	80019a8 <HAL_RCC_ClockConfig>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80005c0:	f000 f966 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3|RCC_PERIPHCLK_RTC;
 80005c4:	003b      	movs	r3, r7
 80005c6:	2290      	movs	r2, #144	@ 0x90
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80005cc:	003b      	movs	r3, r7
 80005ce:	2200      	movs	r2, #0
 80005d0:	619a      	str	r2, [r3, #24]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80005d2:	003b      	movs	r3, r7
 80005d4:	2280      	movs	r2, #128	@ 0x80
 80005d6:	0292      	lsls	r2, r2, #10
 80005d8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005da:	003b      	movs	r3, r7
 80005dc:	0018      	movs	r0, r3
 80005de:	f001 fbd1 	bl	8001d84 <HAL_RCCEx_PeriphCLKConfig>
 80005e2:	1e03      	subs	r3, r0, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd6>
  {
    Error_Handler();
 80005e6:	f000 f953 	bl	8000890 <Error_Handler>
  }
}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b01b      	add	sp, #108	@ 0x6c
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40007000 	.word	0x40007000
 80005f8:	ffffe7ff 	.word	0xffffe7ff

080005fc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000600:	4b1c      	ldr	r3, [pc, #112]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000602:	4a1d      	ldr	r2, [pc, #116]	@ (8000678 <MX_I2C3_Init+0x7c>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000708;
 8000606:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000608:	22e1      	movs	r2, #225	@ 0xe1
 800060a:	00d2      	lsls	r2, r2, #3
 800060c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000614:	4b17      	ldr	r3, [pc, #92]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000616:	2201      	movs	r2, #1
 8000618:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <MX_I2C3_Init+0x78>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000620:	4b14      	ldr	r3, [pc, #80]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000622:	2200      	movs	r2, #0
 8000624:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000626:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062c:	4b11      	ldr	r3, [pc, #68]	@ (8000674 <MX_I2C3_Init+0x78>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000632:	4b10      	ldr	r3, [pc, #64]	@ (8000674 <MX_I2C3_Init+0x78>)
 8000634:	2200      	movs	r2, #0
 8000636:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_I2C3_Init+0x78>)
 800063a:	0018      	movs	r0, r3
 800063c:	f000 fd0a 	bl	8001054 <HAL_I2C_Init>
 8000640:	1e03      	subs	r3, r0, #0
 8000642:	d001      	beq.n	8000648 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000644:	f000 f924 	bl	8000890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000648:	4b0a      	ldr	r3, [pc, #40]	@ (8000674 <MX_I2C3_Init+0x78>)
 800064a:	2100      	movs	r1, #0
 800064c:	0018      	movs	r0, r3
 800064e:	f000 fd97 	bl	8001180 <HAL_I2CEx_ConfigAnalogFilter>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000656:	f000 f91b 	bl	8000890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800065a:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <MX_I2C3_Init+0x78>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f000 fdda 	bl	8001218 <HAL_I2CEx_ConfigDigitalFilter>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f912 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800066c:	46c0      	nop			@ (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	20000028 	.word	0x20000028
 8000678:	40007800 	.word	0x40007800

0800067c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <MX_RTC_Init+0x60>)
 8000682:	4a17      	ldr	r2, [pc, #92]	@ (80006e0 <MX_RTC_Init+0x64>)
 8000684:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000686:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <MX_RTC_Init+0x60>)
 8000688:	2200      	movs	r2, #0
 800068a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <MX_RTC_Init+0x60>)
 800068e:	227f      	movs	r2, #127	@ 0x7f
 8000690:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000692:	4b12      	ldr	r3, [pc, #72]	@ (80006dc <MX_RTC_Init+0x60>)
 8000694:	22ff      	movs	r2, #255	@ 0xff
 8000696:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <MX_RTC_Init+0x60>)
 800069a:	2200      	movs	r2, #0
 800069c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800069e:	4b0f      	ldr	r3, [pc, #60]	@ (80006dc <MX_RTC_Init+0x60>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80006a4:	4b0d      	ldr	r3, [pc, #52]	@ (80006dc <MX_RTC_Init+0x60>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_RTC_Init+0x60>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80006b0:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <MX_RTC_Init+0x60>)
 80006b2:	0018      	movs	r0, r3
 80006b4:	f001 fcb0 	bl	8002018 <HAL_RTC_Init>
 80006b8:	1e03      	subs	r3, r0, #0
 80006ba:	d001      	beq.n	80006c0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80006bc:	f000 f8e8 	bl	8000890 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 60, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <MX_RTC_Init+0x60>)
 80006c2:	2204      	movs	r2, #4
 80006c4:	213c      	movs	r1, #60	@ 0x3c
 80006c6:	0018      	movs	r0, r3
 80006c8:	f001 fdd8 	bl	800227c <HAL_RTCEx_SetWakeUpTimer_IT>
 80006cc:	1e03      	subs	r3, r0, #0
 80006ce:	d001      	beq.n	80006d4 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 80006d0:	f000 f8de 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	2000007c 	.word	0x2000007c
 80006e0:	40002800 	.word	0x40002800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b590      	push	{r4, r7, lr}
 80006e6:	b08b      	sub	sp, #44	@ 0x2c
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	2414      	movs	r4, #20
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	0018      	movs	r0, r3
 80006f0:	2314      	movs	r3, #20
 80006f2:	001a      	movs	r2, r3
 80006f4:	2100      	movs	r1, #0
 80006f6:	f001 fed1 	bl	800249c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006fa:	4b5d      	ldr	r3, [pc, #372]	@ (8000870 <MX_GPIO_Init+0x18c>)
 80006fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80006fe:	4b5c      	ldr	r3, [pc, #368]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000700:	2104      	movs	r1, #4
 8000702:	430a      	orrs	r2, r1
 8000704:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000706:	4b5a      	ldr	r3, [pc, #360]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070a:	2204      	movs	r2, #4
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	4b57      	ldr	r3, [pc, #348]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000716:	4b56      	ldr	r3, [pc, #344]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000718:	2180      	movs	r1, #128	@ 0x80
 800071a:	430a      	orrs	r2, r1
 800071c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800071e:	4b54      	ldr	r3, [pc, #336]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000722:	2280      	movs	r2, #128	@ 0x80
 8000724:	4013      	ands	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	4b51      	ldr	r3, [pc, #324]	@ (8000870 <MX_GPIO_Init+0x18c>)
 800072c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072e:	4b50      	ldr	r3, [pc, #320]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000730:	2101      	movs	r1, #1
 8000732:	430a      	orrs	r2, r1
 8000734:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000736:	4b4e      	ldr	r3, [pc, #312]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	2201      	movs	r2, #1
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b4b      	ldr	r3, [pc, #300]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000746:	4b4a      	ldr	r3, [pc, #296]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000748:	2102      	movs	r1, #2
 800074a:	430a      	orrs	r2, r1
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800074e:	4b48      	ldr	r3, [pc, #288]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000752:	2202      	movs	r2, #2
 8000754:	4013      	ands	r3, r2
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	4b45      	ldr	r3, [pc, #276]	@ (8000870 <MX_GPIO_Init+0x18c>)
 800075c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800075e:	4b44      	ldr	r3, [pc, #272]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000760:	2108      	movs	r1, #8
 8000762:	430a      	orrs	r2, r1
 8000764:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000766:	4b42      	ldr	r3, [pc, #264]	@ (8000870 <MX_GPIO_Init+0x18c>)
 8000768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800076a:	2208      	movs	r2, #8
 800076c:	4013      	ands	r3, r2
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, HIGH_POWER_Pin|LED_Pin, GPIO_PIN_SET);
 8000772:	2382      	movs	r3, #130	@ 0x82
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	483f      	ldr	r0, [pc, #252]	@ (8000874 <MX_GPIO_Init+0x190>)
 8000778:	2201      	movs	r2, #1
 800077a:	0019      	movs	r1, r3
 800077c:	f000 fc4c 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC2
                           PC4 PC5 PC6 PC7
                           PC8 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_2
 8000780:	193b      	adds	r3, r7, r4
 8000782:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x194>)
 8000784:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000786:	193b      	adds	r3, r7, r4
 8000788:	2203      	movs	r2, #3
 800078a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078c:	193b      	adds	r3, r7, r4
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000792:	193b      	adds	r3, r7, r4
 8000794:	4a37      	ldr	r2, [pc, #220]	@ (8000874 <MX_GPIO_Init+0x190>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f000 fabf 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2203      	movs	r2, #3
 80007a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	2203      	movs	r2, #3
 80007a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	193b      	adds	r3, r7, r4
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	4a32      	ldr	r2, [pc, #200]	@ (800087c <MX_GPIO_Init+0x198>)
 80007b4:	0019      	movs	r1, r3
 80007b6:	0010      	movs	r0, r2
 80007b8:	f000 fab0 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : HIGH_POWER_Pin */
  GPIO_InitStruct.Pin = HIGH_POWER_Pin;
 80007bc:	193b      	adds	r3, r7, r4
 80007be:	2208      	movs	r2, #8
 80007c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80007c2:	193b      	adds	r3, r7, r4
 80007c4:	2211      	movs	r2, #17
 80007c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	193b      	adds	r3, r7, r4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(HIGH_POWER_GPIO_Port, &GPIO_InitStruct);
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	4a27      	ldr	r2, [pc, #156]	@ (8000874 <MX_GPIO_Init+0x190>)
 80007d8:	0019      	movs	r1, r3
 80007da:	0010      	movs	r0, r2
 80007dc:	f000 fa9e 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007e0:	193b      	adds	r3, r7, r4
 80007e2:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <MX_GPIO_Init+0x19c>)
 80007e4:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	2203      	movs	r2, #3
 80007ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	193b      	adds	r3, r7, r4
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	193a      	adds	r2, r7, r4
 80007f4:	23a0      	movs	r3, #160	@ 0xa0
 80007f6:	05db      	lsls	r3, r3, #23
 80007f8:	0011      	movs	r1, r2
 80007fa:	0018      	movs	r0, r3
 80007fc:	f000 fa8e 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000800:	193b      	adds	r3, r7, r4
 8000802:	4a20      	ldr	r2, [pc, #128]	@ (8000884 <MX_GPIO_Init+0x1a0>)
 8000804:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000806:	193b      	adds	r3, r7, r4
 8000808:	2203      	movs	r2, #3
 800080a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	193b      	adds	r3, r7, r4
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000812:	193b      	adds	r3, r7, r4
 8000814:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_GPIO_Init+0x1a4>)
 8000816:	0019      	movs	r1, r3
 8000818:	0010      	movs	r0, r2
 800081a:	f000 fa7f 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800081e:	0021      	movs	r1, r4
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2280      	movs	r2, #128	@ 0x80
 8000824:	0092      	lsls	r2, r2, #2
 8000826:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	000c      	movs	r4, r1
 800082a:	193b      	adds	r3, r7, r4
 800082c:	2201      	movs	r2, #1
 800082e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	193b      	adds	r3, r7, r4
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000836:	193b      	adds	r3, r7, r4
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800083c:	193b      	adds	r3, r7, r4
 800083e:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <MX_GPIO_Init+0x190>)
 8000840:	0019      	movs	r1, r3
 8000842:	0010      	movs	r0, r2
 8000844:	f000 fa6a 	bl	8000d1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000848:	0021      	movs	r1, r4
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2204      	movs	r2, #4
 800084e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2203      	movs	r2, #3
 8000854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	187b      	adds	r3, r7, r1
 800085e:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <MX_GPIO_Init+0x1a8>)
 8000860:	0019      	movs	r1, r3
 8000862:	0010      	movs	r0, r2
 8000864:	f000 fa5a 	bl	8000d1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	46c0      	nop			@ (mov r8, r8)
 800086a:	46bd      	mov	sp, r7
 800086c:	b00b      	add	sp, #44	@ 0x2c
 800086e:	bd90      	pop	{r4, r7, pc}
 8000870:	40021000 	.word	0x40021000
 8000874:	50000800 	.word	0x50000800
 8000878:	0000fdf4 	.word	0x0000fdf4
 800087c:	50001c00 	.word	0x50001c00
 8000880:	00009fff 	.word	0x00009fff
 8000884:	0000ffff 	.word	0x0000ffff
 8000888:	50000400 	.word	0x50000400
 800088c:	50000c00 	.word	0x50000c00

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000898:	46c0      	nop			@ (mov r8, r8)
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a0:	4b07      	ldr	r3, [pc, #28]	@ (80008c0 <HAL_MspInit+0x24>)
 80008a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x24>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	4b04      	ldr	r3, [pc, #16]	@ (80008c0 <HAL_MspInit+0x24>)
 80008ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80008b0:	4b03      	ldr	r3, [pc, #12]	@ (80008c0 <HAL_MspInit+0x24>)
 80008b2:	2180      	movs	r1, #128	@ 0x80
 80008b4:	0549      	lsls	r1, r1, #21
 80008b6:	430a      	orrs	r2, r1
 80008b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ba:	46c0      	nop			@ (mov r8, r8)
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40021000 	.word	0x40021000

080008c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80008c4:	b590      	push	{r4, r7, lr}
 80008c6:	b089      	sub	sp, #36	@ 0x24
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008cc:	240c      	movs	r4, #12
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	0018      	movs	r0, r3
 80008d2:	2314      	movs	r3, #20
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f001 fde0 	bl	800249c <memset>
  if(hi2c->Instance==I2C3)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a17      	ldr	r2, [pc, #92]	@ (8000940 <HAL_I2C_MspInit+0x7c>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d128      	bne.n	8000938 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	4b17      	ldr	r3, [pc, #92]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008ec:	2104      	movs	r1, #4
 80008ee:	430a      	orrs	r2, r1
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008f2:	4b14      	ldr	r3, [pc, #80]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f6:	2204      	movs	r2, #4
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008fe:	0021      	movs	r1, r4
 8000900:	187b      	adds	r3, r7, r1
 8000902:	2203      	movs	r2, #3
 8000904:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000906:	187b      	adds	r3, r7, r1
 8000908:	2212      	movs	r2, #18
 800090a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	187b      	adds	r3, r7, r1
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	187b      	adds	r3, r7, r1
 8000914:	2203      	movs	r2, #3
 8000916:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2C3;
 8000918:	187b      	adds	r3, r7, r1
 800091a:	2207      	movs	r2, #7
 800091c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800091e:	187b      	adds	r3, r7, r1
 8000920:	4a09      	ldr	r2, [pc, #36]	@ (8000948 <HAL_I2C_MspInit+0x84>)
 8000922:	0019      	movs	r1, r3
 8000924:	0010      	movs	r0, r2
 8000926:	f000 f9f9 	bl	8000d1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800092a:	4b06      	ldr	r3, [pc, #24]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 800092c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800092e:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <HAL_I2C_MspInit+0x80>)
 8000930:	2180      	movs	r1, #128	@ 0x80
 8000932:	05c9      	lsls	r1, r1, #23
 8000934:	430a      	orrs	r2, r1
 8000936:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000938:	46c0      	nop			@ (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b009      	add	sp, #36	@ 0x24
 800093e:	bd90      	pop	{r4, r7, pc}
 8000940:	40007800 	.word	0x40007800
 8000944:	40021000 	.word	0x40021000
 8000948:	50000800 	.word	0x50000800

0800094c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a0a      	ldr	r2, [pc, #40]	@ (8000984 <HAL_RTC_MspInit+0x38>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d10e      	bne.n	800097c <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800095e:	4b0a      	ldr	r3, [pc, #40]	@ (8000988 <HAL_RTC_MspInit+0x3c>)
 8000960:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_RTC_MspInit+0x3c>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	02c9      	lsls	r1, r1, #11
 8000968:	430a      	orrs	r2, r1
 800096a:	651a      	str	r2, [r3, #80]	@ 0x50
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800096c:	2200      	movs	r2, #0
 800096e:	2100      	movs	r1, #0
 8000970:	2002      	movs	r0, #2
 8000972:	f000 f9a1 	bl	8000cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000976:	2002      	movs	r0, #2
 8000978:	f000 f9b3 	bl	8000ce2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800097c:	46c0      	nop			@ (mov r8, r8)
 800097e:	46bd      	mov	sp, r7
 8000980:	b002      	add	sp, #8
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40002800 	.word	0x40002800
 8000988:	40021000 	.word	0x40021000

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	e7fd      	b.n	8000990 <NMI_Handler+0x4>

08000994 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000998:	46c0      	nop			@ (mov r8, r8)
 800099a:	e7fd      	b.n	8000998 <HardFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009a0:	46c0      	nop			@ (mov r8, r8)
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009b4:	f000 f894 	bl	8000ae0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80009c4:	4b03      	ldr	r3, [pc, #12]	@ (80009d4 <RTC_IRQHandler+0x14>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fd30 	bl	800242c <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	2000007c 	.word	0x2000007c

080009d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80009e4:	480d      	ldr	r0, [pc, #52]	@ (8000a1c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80009e6:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e8:	f7ff fff6 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009ec:	480c      	ldr	r0, [pc, #48]	@ (8000a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80009ee:	490d      	ldr	r1, [pc, #52]	@ (8000a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000a28 <LoopForever+0xe>)
  movs r3, #0
 80009f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f4:	e002      	b.n	80009fc <LoopCopyDataInit>

080009f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fa:	3304      	adds	r3, #4

080009fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a00:	d3f9      	bcc.n	80009f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a02:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a04:	4c0a      	ldr	r4, [pc, #40]	@ (8000a30 <LoopForever+0x16>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a08:	e001      	b.n	8000a0e <LoopFillZerobss>

08000a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a0c:	3204      	adds	r2, #4

08000a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a10:	d3fb      	bcc.n	8000a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a12:	f001 fd4b 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a16:	f7ff fd47 	bl	80004a8 <main>

08000a1a <LoopForever>:

LoopForever:
    b LoopForever
 8000a1a:	e7fe      	b.n	8000a1a <LoopForever>
   ldr   r0, =_estack
 8000a1c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a28:	08002538 	.word	0x08002538
  ldr r2, =_sbss
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a30:	200000a4 	.word	0x200000a4

08000a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a34:	e7fe      	b.n	8000a34 <ADC1_COMP_IRQHandler>
	...

08000a38 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a44:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <HAL_Init+0x3c>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b0a      	ldr	r3, [pc, #40]	@ (8000a74 <HAL_Init+0x3c>)
 8000a4a:	2140      	movs	r1, #64	@ 0x40
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f811 	bl	8000a78 <HAL_InitTick>
 8000a56:	1e03      	subs	r3, r0, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e001      	b.n	8000a66 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a62:	f7ff ff1b 	bl	800089c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
}
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	b002      	add	sp, #8
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	40022000 	.word	0x40022000

08000a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a78:	b590      	push	{r4, r7, lr}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <HAL_InitTick+0x5c>)
 8000a82:	681c      	ldr	r4, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <HAL_InitTick+0x60>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0019      	movs	r1, r3
 8000a8a:	23fa      	movs	r3, #250	@ 0xfa
 8000a8c:	0098      	lsls	r0, r3, #2
 8000a8e:	f7ff fb3b 	bl	8000108 <__udivsi3>
 8000a92:	0003      	movs	r3, r0
 8000a94:	0019      	movs	r1, r3
 8000a96:	0020      	movs	r0, r4
 8000a98:	f7ff fb36 	bl	8000108 <__udivsi3>
 8000a9c:	0003      	movs	r3, r0
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f000 f92f 	bl	8000d02 <HAL_SYSTICK_Config>
 8000aa4:	1e03      	subs	r3, r0, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	e00f      	b.n	8000acc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b03      	cmp	r3, #3
 8000ab0:	d80b      	bhi.n	8000aca <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	425b      	negs	r3, r3
 8000ab8:	2200      	movs	r2, #0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f8fc 	bl	8000cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_InitTick+0x64>)
 8000ac2:	687a      	ldr	r2, [r7, #4]
 8000ac4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	e000      	b.n	8000acc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b003      	add	sp, #12
 8000ad2:	bd90      	pop	{r4, r7, pc}
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000004 	.word	0x20000004

08000ae0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	001a      	movs	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	@ (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	18d2      	adds	r2, r2, r3
 8000af0:	4b03      	ldr	r3, [pc, #12]	@ (8000b00 <HAL_IncTick+0x20>)
 8000af2:	601a      	str	r2, [r3, #0]
}
 8000af4:	46c0      	nop			@ (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	46c0      	nop			@ (mov r8, r8)
 8000afc:	20000008 	.word	0x20000008
 8000b00:	200000a0 	.word	0x200000a0

08000b04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	@ (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			@ (mov r8, r8)
 8000b14:	200000a0 	.word	0x200000a0

08000b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b20:	f7ff fff0 	bl	8000b04 <HAL_GetTick>
 8000b24:	0003      	movs	r3, r0
 8000b26:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	d005      	beq.n	8000b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_Delay+0x44>)
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	001a      	movs	r2, r3
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	189b      	adds	r3, r3, r2
 8000b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b3e:	46c0      	nop			@ (mov r8, r8)
 8000b40:	f7ff ffe0 	bl	8000b04 <HAL_GetTick>
 8000b44:	0002      	movs	r2, r0
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	1ad3      	subs	r3, r2, r3
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	429a      	cmp	r2, r3
 8000b4e:	d8f7      	bhi.n	8000b40 <HAL_Delay+0x28>
  {
  }
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	20000008 	.word	0x20000008

08000b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	0002      	movs	r2, r0
 8000b68:	1dfb      	adds	r3, r7, #7
 8000b6a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b6c:	1dfb      	adds	r3, r7, #7
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	d809      	bhi.n	8000b88 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b74:	1dfb      	adds	r3, r7, #7
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	001a      	movs	r2, r3
 8000b7a:	231f      	movs	r3, #31
 8000b7c:	401a      	ands	r2, r3
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <__NVIC_EnableIRQ+0x30>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	4091      	lsls	r1, r2
 8000b84:	000a      	movs	r2, r1
 8000b86:	601a      	str	r2, [r3, #0]
  }
}
 8000b88:	46c0      	nop			@ (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b002      	add	sp, #8
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	e000e100 	.word	0xe000e100

08000b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b94:	b590      	push	{r4, r7, lr}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	0002      	movs	r2, r0
 8000b9c:	6039      	str	r1, [r7, #0]
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ba8:	d828      	bhi.n	8000bfc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000baa:	4a2f      	ldr	r2, [pc, #188]	@ (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	b25b      	sxtb	r3, r3
 8000bb2:	089b      	lsrs	r3, r3, #2
 8000bb4:	33c0      	adds	r3, #192	@ 0xc0
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	589b      	ldr	r3, [r3, r2]
 8000bba:	1dfa      	adds	r2, r7, #7
 8000bbc:	7812      	ldrb	r2, [r2, #0]
 8000bbe:	0011      	movs	r1, r2
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	400a      	ands	r2, r1
 8000bc4:	00d2      	lsls	r2, r2, #3
 8000bc6:	21ff      	movs	r1, #255	@ 0xff
 8000bc8:	4091      	lsls	r1, r2
 8000bca:	000a      	movs	r2, r1
 8000bcc:	43d2      	mvns	r2, r2
 8000bce:	401a      	ands	r2, r3
 8000bd0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bd2:	683b      	ldr	r3, [r7, #0]
 8000bd4:	019b      	lsls	r3, r3, #6
 8000bd6:	22ff      	movs	r2, #255	@ 0xff
 8000bd8:	401a      	ands	r2, r3
 8000bda:	1dfb      	adds	r3, r7, #7
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	0018      	movs	r0, r3
 8000be0:	2303      	movs	r3, #3
 8000be2:	4003      	ands	r3, r0
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000be8:	481f      	ldr	r0, [pc, #124]	@ (8000c68 <__NVIC_SetPriority+0xd4>)
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	089b      	lsrs	r3, r3, #2
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	33c0      	adds	r3, #192	@ 0xc0
 8000bf6:	009b      	lsls	r3, r3, #2
 8000bf8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bfa:	e031      	b.n	8000c60 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c6c <__NVIC_SetPriority+0xd8>)
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	0019      	movs	r1, r3
 8000c04:	230f      	movs	r3, #15
 8000c06:	400b      	ands	r3, r1
 8000c08:	3b08      	subs	r3, #8
 8000c0a:	089b      	lsrs	r3, r3, #2
 8000c0c:	3306      	adds	r3, #6
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	18d3      	adds	r3, r2, r3
 8000c12:	3304      	adds	r3, #4
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	1dfa      	adds	r2, r7, #7
 8000c18:	7812      	ldrb	r2, [r2, #0]
 8000c1a:	0011      	movs	r1, r2
 8000c1c:	2203      	movs	r2, #3
 8000c1e:	400a      	ands	r2, r1
 8000c20:	00d2      	lsls	r2, r2, #3
 8000c22:	21ff      	movs	r1, #255	@ 0xff
 8000c24:	4091      	lsls	r1, r2
 8000c26:	000a      	movs	r2, r1
 8000c28:	43d2      	mvns	r2, r2
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	019b      	lsls	r3, r3, #6
 8000c32:	22ff      	movs	r2, #255	@ 0xff
 8000c34:	401a      	ands	r2, r3
 8000c36:	1dfb      	adds	r3, r7, #7
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	4003      	ands	r3, r0
 8000c40:	00db      	lsls	r3, r3, #3
 8000c42:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c44:	4809      	ldr	r0, [pc, #36]	@ (8000c6c <__NVIC_SetPriority+0xd8>)
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	001c      	movs	r4, r3
 8000c4c:	230f      	movs	r3, #15
 8000c4e:	4023      	ands	r3, r4
 8000c50:	3b08      	subs	r3, #8
 8000c52:	089b      	lsrs	r3, r3, #2
 8000c54:	430a      	orrs	r2, r1
 8000c56:	3306      	adds	r3, #6
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	18c3      	adds	r3, r0, r3
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	601a      	str	r2, [r3, #0]
}
 8000c60:	46c0      	nop			@ (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b003      	add	sp, #12
 8000c66:	bd90      	pop	{r4, r7, pc}
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	2380      	movs	r3, #128	@ 0x80
 8000c7e:	045b      	lsls	r3, r3, #17
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d301      	bcc.n	8000c88 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c84:	2301      	movs	r3, #1
 8000c86:	e010      	b.n	8000caa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c88:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb4 <SysTick_Config+0x44>)
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	3a01      	subs	r2, #1
 8000c8e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c90:	2301      	movs	r3, #1
 8000c92:	425b      	negs	r3, r3
 8000c94:	2103      	movs	r1, #3
 8000c96:	0018      	movs	r0, r3
 8000c98:	f7ff ff7c 	bl	8000b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c9c:	4b05      	ldr	r3, [pc, #20]	@ (8000cb4 <SysTick_Config+0x44>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ca2:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <SysTick_Config+0x44>)
 8000ca4:	2207      	movs	r2, #7
 8000ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			@ (mov r8, r8)
 8000cb4:	e000e010 	.word	0xe000e010

08000cb8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	1c02      	adds	r2, r0, #0
 8000cc8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b25b      	sxtb	r3, r3
 8000cd2:	0011      	movs	r1, r2
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	f7ff ff5d 	bl	8000b94 <__NVIC_SetPriority>
}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b004      	add	sp, #16
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b082      	sub	sp, #8
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	0002      	movs	r2, r0
 8000cea:	1dfb      	adds	r3, r7, #7
 8000cec:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	b25b      	sxtb	r3, r3
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	f7ff ff33 	bl	8000b60 <__NVIC_EnableIRQ>
}
 8000cfa:	46c0      	nop			@ (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	b002      	add	sp, #8
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b082      	sub	sp, #8
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff ffaf 	bl	8000c70 <SysTick_Config>
 8000d12:	0003      	movs	r3, r0
}
 8000d14:	0018      	movs	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	b002      	add	sp, #8
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d32:	e155      	b.n	8000fe0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	2101      	movs	r1, #1
 8000d3a:	697a      	ldr	r2, [r7, #20]
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	4013      	ands	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d100      	bne.n	8000d4c <HAL_GPIO_Init+0x30>
 8000d4a:	e146      	b.n	8000fda <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2203      	movs	r2, #3
 8000d52:	4013      	ands	r3, r2
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d005      	beq.n	8000d64 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d130      	bne.n	8000dc6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	409a      	lsls	r2, r3
 8000d72:	0013      	movs	r3, r2
 8000d74:	43da      	mvns	r2, r3
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	68da      	ldr	r2, [r3, #12]
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
 8000da0:	0013      	movs	r3, r2
 8000da2:	43da      	mvns	r2, r3
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4013      	ands	r3, r2
 8000da8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	091b      	lsrs	r3, r3, #4
 8000db0:	2201      	movs	r2, #1
 8000db2:	401a      	ands	r2, r3
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	409a      	lsls	r2, r3
 8000db8:	0013      	movs	r3, r2
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2203      	movs	r2, #3
 8000dcc:	4013      	ands	r3, r2
 8000dce:	2b03      	cmp	r3, #3
 8000dd0:	d017      	beq.n	8000e02 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	68db      	ldr	r3, [r3, #12]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	2203      	movs	r2, #3
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	43da      	mvns	r2, r3
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	689a      	ldr	r2, [r3, #8]
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	005b      	lsls	r3, r3, #1
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	693a      	ldr	r2, [r7, #16]
 8000e00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	2203      	movs	r2, #3
 8000e08:	4013      	ands	r3, r2
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d123      	bne.n	8000e56 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	3208      	adds	r2, #8
 8000e16:	0092      	lsls	r2, r2, #2
 8000e18:	58d3      	ldr	r3, [r2, r3]
 8000e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2207      	movs	r2, #7
 8000e20:	4013      	ands	r3, r2
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	220f      	movs	r2, #15
 8000e26:	409a      	lsls	r2, r3
 8000e28:	0013      	movs	r3, r2
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	691a      	ldr	r2, [r3, #16]
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	2107      	movs	r1, #7
 8000e3a:	400b      	ands	r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	08da      	lsrs	r2, r3, #3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	3208      	adds	r2, #8
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	2203      	movs	r2, #3
 8000e62:	409a      	lsls	r2, r3
 8000e64:	0013      	movs	r3, r2
 8000e66:	43da      	mvns	r2, r3
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	401a      	ands	r2, r3
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685a      	ldr	r2, [r3, #4]
 8000e8e:	23c0      	movs	r3, #192	@ 0xc0
 8000e90:	029b      	lsls	r3, r3, #10
 8000e92:	4013      	ands	r3, r2
 8000e94:	d100      	bne.n	8000e98 <HAL_GPIO_Init+0x17c>
 8000e96:	e0a0      	b.n	8000fda <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e98:	4b57      	ldr	r3, [pc, #348]	@ (8000ff8 <HAL_GPIO_Init+0x2dc>)
 8000e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e9c:	4b56      	ldr	r3, [pc, #344]	@ (8000ff8 <HAL_GPIO_Init+0x2dc>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	430a      	orrs	r2, r1
 8000ea2:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea4:	4a55      	ldr	r2, [pc, #340]	@ (8000ffc <HAL_GPIO_Init+0x2e0>)
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	589b      	ldr	r3, [r3, r2]
 8000eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	409a      	lsls	r2, r3
 8000ebe:	0013      	movs	r3, r2
 8000ec0:	43da      	mvns	r2, r3
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	23a0      	movs	r3, #160	@ 0xa0
 8000ecc:	05db      	lsls	r3, r3, #23
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d01f      	beq.n	8000f12 <HAL_GPIO_Init+0x1f6>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4a      	ldr	r2, [pc, #296]	@ (8001000 <HAL_GPIO_Init+0x2e4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d019      	beq.n	8000f0e <HAL_GPIO_Init+0x1f2>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a49      	ldr	r2, [pc, #292]	@ (8001004 <HAL_GPIO_Init+0x2e8>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d013      	beq.n	8000f0a <HAL_GPIO_Init+0x1ee>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a48      	ldr	r2, [pc, #288]	@ (8001008 <HAL_GPIO_Init+0x2ec>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d00d      	beq.n	8000f06 <HAL_GPIO_Init+0x1ea>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a47      	ldr	r2, [pc, #284]	@ (800100c <HAL_GPIO_Init+0x2f0>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d007      	beq.n	8000f02 <HAL_GPIO_Init+0x1e6>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a46      	ldr	r2, [pc, #280]	@ (8001010 <HAL_GPIO_Init+0x2f4>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d101      	bne.n	8000efe <HAL_GPIO_Init+0x1e2>
 8000efa:	2305      	movs	r3, #5
 8000efc:	e00a      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000efe:	2306      	movs	r3, #6
 8000f00:	e008      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f02:	2304      	movs	r3, #4
 8000f04:	e006      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f06:	2303      	movs	r3, #3
 8000f08:	e004      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	e002      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e000      	b.n	8000f14 <HAL_GPIO_Init+0x1f8>
 8000f12:	2300      	movs	r3, #0
 8000f14:	697a      	ldr	r2, [r7, #20]
 8000f16:	2103      	movs	r1, #3
 8000f18:	400a      	ands	r2, r1
 8000f1a:	0092      	lsls	r2, r2, #2
 8000f1c:	4093      	lsls	r3, r2
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f24:	4935      	ldr	r1, [pc, #212]	@ (8000ffc <HAL_GPIO_Init+0x2e0>)
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	3302      	adds	r3, #2
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f32:	4b38      	ldr	r3, [pc, #224]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	43da      	mvns	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	2380      	movs	r3, #128	@ 0x80
 8000f48:	035b      	lsls	r3, r3, #13
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	d003      	beq.n	8000f56 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f56:	4b2f      	ldr	r3, [pc, #188]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	43da      	mvns	r2, r3
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	039b      	lsls	r3, r3, #14
 8000f74:	4013      	ands	r3, r2
 8000f76:	d003      	beq.n	8000f80 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f80:	4b24      	ldr	r3, [pc, #144]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8000f86:	4b23      	ldr	r3, [pc, #140]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	2380      	movs	r3, #128	@ 0x80
 8000f9c:	029b      	lsls	r3, r3, #10
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	d003      	beq.n	8000faa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000faa:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000fac:	693a      	ldr	r2, [r7, #16]
 8000fae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fb0:	4b18      	ldr	r3, [pc, #96]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43da      	mvns	r2, r3
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	2380      	movs	r3, #128	@ 0x80
 8000fc6:	025b      	lsls	r3, r3, #9
 8000fc8:	4013      	ands	r3, r2
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <HAL_GPIO_Init+0x2f8>)
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	40da      	lsrs	r2, r3
 8000fe8:	1e13      	subs	r3, r2, #0
 8000fea:	d000      	beq.n	8000fee <HAL_GPIO_Init+0x2d2>
 8000fec:	e6a2      	b.n	8000d34 <HAL_GPIO_Init+0x18>
  }
}
 8000fee:	46c0      	nop			@ (mov r8, r8)
 8000ff0:	46c0      	nop			@ (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	40010000 	.word	0x40010000
 8001000:	50000400 	.word	0x50000400
 8001004:	50000800 	.word	0x50000800
 8001008:	50000c00 	.word	0x50000c00
 800100c:	50001000 	.word	0x50001000
 8001010:	50001c00 	.word	0x50001c00
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	0008      	movs	r0, r1
 8001022:	0011      	movs	r1, r2
 8001024:	1cbb      	adds	r3, r7, #2
 8001026:	1c02      	adds	r2, r0, #0
 8001028:	801a      	strh	r2, [r3, #0]
 800102a:	1c7b      	adds	r3, r7, #1
 800102c:	1c0a      	adds	r2, r1, #0
 800102e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001030:	1c7b      	adds	r3, r7, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d004      	beq.n	8001042 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001038:	1cbb      	adds	r3, r7, #2
 800103a:	881a      	ldrh	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001042:	1cbb      	adds	r3, r7, #2
 8001044:	881a      	ldrh	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b002      	add	sp, #8
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e082      	b.n	800116c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2241      	movs	r2, #65	@ 0x41
 800106a:	5c9b      	ldrb	r3, [r3, r2]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d107      	bne.n	8001082 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2240      	movs	r2, #64	@ 0x40
 8001076:	2100      	movs	r1, #0
 8001078:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	0018      	movs	r0, r3
 800107e:	f7ff fc21 	bl	80008c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2241      	movs	r2, #65	@ 0x41
 8001086:	2124      	movs	r1, #36	@ 0x24
 8001088:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2101      	movs	r1, #1
 8001096:	438a      	bics	r2, r1
 8001098:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685a      	ldr	r2, [r3, #4]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4934      	ldr	r1, [pc, #208]	@ (8001174 <HAL_I2C_Init+0x120>)
 80010a4:	400a      	ands	r2, r1
 80010a6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4931      	ldr	r1, [pc, #196]	@ (8001178 <HAL_I2C_Init+0x124>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d108      	bne.n	80010d2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689a      	ldr	r2, [r3, #8]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	0209      	lsls	r1, r1, #8
 80010cc:	430a      	orrs	r2, r1
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	e007      	b.n	80010e2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2184      	movs	r1, #132	@ 0x84
 80010dc:	0209      	lsls	r1, r1, #8
 80010de:	430a      	orrs	r2, r1
 80010e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d104      	bne.n	80010f4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2280      	movs	r2, #128	@ 0x80
 80010f0:	0112      	lsls	r2, r2, #4
 80010f2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	491f      	ldr	r1, [pc, #124]	@ (800117c <HAL_I2C_Init+0x128>)
 8001100:	430a      	orrs	r2, r1
 8001102:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	68da      	ldr	r2, [r3, #12]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	491a      	ldr	r1, [pc, #104]	@ (8001178 <HAL_I2C_Init+0x124>)
 8001110:	400a      	ands	r2, r1
 8001112:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	431a      	orrs	r2, r3
 800111e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	430a      	orrs	r2, r1
 800112c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69d9      	ldr	r1, [r3, #28]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6a1a      	ldr	r2, [r3, #32]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2101      	movs	r1, #1
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2241      	movs	r2, #65	@ 0x41
 8001158:	2120      	movs	r1, #32
 800115a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2242      	movs	r2, #66	@ 0x42
 8001166:	2100      	movs	r1, #0
 8001168:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}
 8001174:	f0ffffff 	.word	0xf0ffffff
 8001178:	ffff7fff 	.word	0xffff7fff
 800117c:	02008000 	.word	0x02008000

08001180 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2241      	movs	r2, #65	@ 0x41
 800118e:	5c9b      	ldrb	r3, [r3, r2]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2b20      	cmp	r3, #32
 8001194:	d138      	bne.n	8001208 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2240      	movs	r2, #64	@ 0x40
 800119a:	5c9b      	ldrb	r3, [r3, r2]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d101      	bne.n	80011a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e032      	b.n	800120a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	@ 0x40
 80011a8:	2101      	movs	r1, #1
 80011aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2241      	movs	r2, #65	@ 0x41
 80011b0:	2124      	movs	r1, #36	@ 0x24
 80011b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2101      	movs	r1, #1
 80011c0:	438a      	bics	r2, r1
 80011c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4911      	ldr	r1, [pc, #68]	@ (8001214 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80011d0:	400a      	ands	r2, r1
 80011d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6819      	ldr	r1, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	430a      	orrs	r2, r1
 80011e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2101      	movs	r1, #1
 80011f0:	430a      	orrs	r2, r1
 80011f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2241      	movs	r2, #65	@ 0x41
 80011f8:	2120      	movs	r1, #32
 80011fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2240      	movs	r2, #64	@ 0x40
 8001200:	2100      	movs	r1, #0
 8001202:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001204:	2300      	movs	r3, #0
 8001206:	e000      	b.n	800120a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001208:	2302      	movs	r3, #2
  }
}
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	ffffefff 	.word	0xffffefff

08001218 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2241      	movs	r2, #65	@ 0x41
 8001226:	5c9b      	ldrb	r3, [r3, r2]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b20      	cmp	r3, #32
 800122c:	d139      	bne.n	80012a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2240      	movs	r2, #64	@ 0x40
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001238:	2302      	movs	r3, #2
 800123a:	e033      	b.n	80012a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2240      	movs	r2, #64	@ 0x40
 8001240:	2101      	movs	r1, #1
 8001242:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2241      	movs	r2, #65	@ 0x41
 8001248:	2124      	movs	r1, #36	@ 0x24
 800124a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2101      	movs	r1, #1
 8001258:	438a      	bics	r2, r1
 800125a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4a11      	ldr	r2, [pc, #68]	@ (80012ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001268:	4013      	ands	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4313      	orrs	r3, r2
 8001274:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2101      	movs	r1, #1
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2241      	movs	r2, #65	@ 0x41
 8001292:	2120      	movs	r1, #32
 8001294:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2240      	movs	r2, #64	@ 0x40
 800129a:	2100      	movs	r1, #0
 800129c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800129e:	2300      	movs	r3, #0
 80012a0:	e000      	b.n	80012a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012a2:	2302      	movs	r3, #2
  }
}
 80012a4:	0018      	movs	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	b004      	add	sp, #16
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	fffff0ff 	.word	0xfffff0ff

080012b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012b0:	b5b0      	push	{r4, r5, r7, lr}
 80012b2:	b08a      	sub	sp, #40	@ 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	f000 fb6c 	bl	800199c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012c4:	4bc8      	ldr	r3, [pc, #800]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	220c      	movs	r2, #12
 80012ca:	4013      	ands	r3, r2
 80012cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ce:	4bc6      	ldr	r3, [pc, #792]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	2380      	movs	r3, #128	@ 0x80
 80012d4:	025b      	lsls	r3, r3, #9
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2201      	movs	r2, #1
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x36>
 80012e4:	e07d      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	2b08      	cmp	r3, #8
 80012ea:	d007      	beq.n	80012fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0c      	cmp	r3, #12
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	2380      	movs	r3, #128	@ 0x80
 80012f6:	025b      	lsls	r3, r3, #9
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d10d      	bne.n	8001318 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	4bba      	ldr	r3, [pc, #744]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2380      	movs	r3, #128	@ 0x80
 8001302:	029b      	lsls	r3, r3, #10
 8001304:	4013      	ands	r3, r2
 8001306:	d100      	bne.n	800130a <HAL_RCC_OscConfig+0x5a>
 8001308:	e06a      	b.n	80013e0 <HAL_RCC_OscConfig+0x130>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d166      	bne.n	80013e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	f000 fb42 	bl	800199c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	025b      	lsls	r3, r3, #9
 8001320:	429a      	cmp	r2, r3
 8001322:	d107      	bne.n	8001334 <HAL_RCC_OscConfig+0x84>
 8001324:	4bb0      	ldr	r3, [pc, #704]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4baf      	ldr	r3, [pc, #700]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800132a:	2180      	movs	r1, #128	@ 0x80
 800132c:	0249      	lsls	r1, r1, #9
 800132e:	430a      	orrs	r2, r1
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e027      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685a      	ldr	r2, [r3, #4]
 8001338:	23a0      	movs	r3, #160	@ 0xa0
 800133a:	02db      	lsls	r3, r3, #11
 800133c:	429a      	cmp	r2, r3
 800133e:	d10e      	bne.n	800135e <HAL_RCC_OscConfig+0xae>
 8001340:	4ba9      	ldr	r3, [pc, #676]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	4ba8      	ldr	r3, [pc, #672]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001346:	2180      	movs	r1, #128	@ 0x80
 8001348:	02c9      	lsls	r1, r1, #11
 800134a:	430a      	orrs	r2, r1
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	4ba6      	ldr	r3, [pc, #664]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	4ba5      	ldr	r3, [pc, #660]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	0249      	lsls	r1, r1, #9
 8001358:	430a      	orrs	r2, r1
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	e012      	b.n	8001384 <HAL_RCC_OscConfig+0xd4>
 800135e:	4ba2      	ldr	r3, [pc, #648]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4ba1      	ldr	r3, [pc, #644]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001364:	49a1      	ldr	r1, [pc, #644]	@ (80015ec <HAL_RCC_OscConfig+0x33c>)
 8001366:	400a      	ands	r2, r1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	4b9f      	ldr	r3, [pc, #636]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	2380      	movs	r3, #128	@ 0x80
 8001370:	025b      	lsls	r3, r3, #9
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4b9b      	ldr	r3, [pc, #620]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b9a      	ldr	r3, [pc, #616]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800137e:	499c      	ldr	r1, [pc, #624]	@ (80015f0 <HAL_RCC_OscConfig+0x340>)
 8001380:	400a      	ands	r2, r1
 8001382:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d014      	beq.n	80013b6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138c:	f7ff fbba 	bl	8000b04 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001396:	f7ff fbb5 	bl	8000b04 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b64      	cmp	r3, #100	@ 0x64
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e2f9      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a8:	4b8f      	ldr	r3, [pc, #572]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	029b      	lsls	r3, r3, #10
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0xe6>
 80013b4:	e015      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b6:	f7ff fba5 	bl	8000b04 <HAL_GetTick>
 80013ba:	0003      	movs	r3, r0
 80013bc:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013c0:	f7ff fba0 	bl	8000b04 <HAL_GetTick>
 80013c4:	0002      	movs	r2, r0
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b64      	cmp	r3, #100	@ 0x64
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e2e4      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013d2:	4b85      	ldr	r3, [pc, #532]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	2380      	movs	r3, #128	@ 0x80
 80013d8:	029b      	lsls	r3, r3, #10
 80013da:	4013      	ands	r3, r2
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x110>
 80013de:	e000      	b.n	80013e2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2202      	movs	r2, #2
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x13e>
 80013ec:	e099      	b.n	8001522 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68db      	ldr	r3, [r3, #12]
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	2220      	movs	r2, #32
 80013f8:	4013      	ands	r3, r2
 80013fa:	d009      	beq.n	8001410 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80013fc:	4b7a      	ldr	r3, [pc, #488]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b79      	ldr	r3, [pc, #484]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001402:	2120      	movs	r1, #32
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	2220      	movs	r2, #32
 800140c:	4393      	bics	r3, r2
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	2b04      	cmp	r3, #4
 8001414:	d005      	beq.n	8001422 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	2b0c      	cmp	r3, #12
 800141a:	d13e      	bne.n	800149a <HAL_RCC_OscConfig+0x1ea>
 800141c:	69bb      	ldr	r3, [r7, #24]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d13b      	bne.n	800149a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001422:	4b71      	ldr	r3, [pc, #452]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2204      	movs	r2, #4
 8001428:	4013      	ands	r3, r2
 800142a:	d004      	beq.n	8001436 <HAL_RCC_OscConfig+0x186>
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e2b2      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001436:	4b6c      	ldr	r3, [pc, #432]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4a6e      	ldr	r2, [pc, #440]	@ (80015f4 <HAL_RCC_OscConfig+0x344>)
 800143c:	4013      	ands	r3, r2
 800143e:	0019      	movs	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	691b      	ldr	r3, [r3, #16]
 8001444:	021a      	lsls	r2, r3, #8
 8001446:	4b68      	ldr	r3, [pc, #416]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001448:	430a      	orrs	r2, r1
 800144a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800144c:	4b66      	ldr	r3, [pc, #408]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2209      	movs	r2, #9
 8001452:	4393      	bics	r3, r2
 8001454:	0019      	movs	r1, r3
 8001456:	4b64      	ldr	r3, [pc, #400]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001458:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800145e:	f000 fbeb 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001462:	0001      	movs	r1, r0
 8001464:	4b60      	ldr	r3, [pc, #384]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	220f      	movs	r2, #15
 800146c:	4013      	ands	r3, r2
 800146e:	4a62      	ldr	r2, [pc, #392]	@ (80015f8 <HAL_RCC_OscConfig+0x348>)
 8001470:	5cd3      	ldrb	r3, [r2, r3]
 8001472:	000a      	movs	r2, r1
 8001474:	40da      	lsrs	r2, r3
 8001476:	4b61      	ldr	r3, [pc, #388]	@ (80015fc <HAL_RCC_OscConfig+0x34c>)
 8001478:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800147a:	4b61      	ldr	r3, [pc, #388]	@ (8001600 <HAL_RCC_OscConfig+0x350>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	2513      	movs	r5, #19
 8001480:	197c      	adds	r4, r7, r5
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff faf8 	bl	8000a78 <HAL_InitTick>
 8001488:	0003      	movs	r3, r0
 800148a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800148c:	197b      	adds	r3, r7, r5
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d046      	beq.n	8001522 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001494:	197b      	adds	r3, r7, r5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	e280      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800149a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149c:	2b00      	cmp	r3, #0
 800149e:	d027      	beq.n	80014f0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80014a0:	4b51      	ldr	r3, [pc, #324]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2209      	movs	r2, #9
 80014a6:	4393      	bics	r3, r2
 80014a8:	0019      	movs	r1, r3
 80014aa:	4b4f      	ldr	r3, [pc, #316]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80014ae:	430a      	orrs	r2, r1
 80014b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb27 	bl	8000b04 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb22 	bl	8000b04 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e266      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014ce:	4b46      	ldr	r3, [pc, #280]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2204      	movs	r2, #4
 80014d4:	4013      	ands	r3, r2
 80014d6:	d0f1      	beq.n	80014bc <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d8:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a45      	ldr	r2, [pc, #276]	@ (80015f4 <HAL_RCC_OscConfig+0x344>)
 80014de:	4013      	ands	r3, r2
 80014e0:	0019      	movs	r1, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	021a      	lsls	r2, r3, #8
 80014e8:	4b3f      	ldr	r3, [pc, #252]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014ea:	430a      	orrs	r2, r1
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	e018      	b.n	8001522 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014f0:	4b3d      	ldr	r3, [pc, #244]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b3c      	ldr	r3, [pc, #240]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80014f6:	2101      	movs	r1, #1
 80014f8:	438a      	bics	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb02 	bl	8000b04 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001506:	f7ff fafd 	bl	8000b04 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e241      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001518:	4b33      	ldr	r3, [pc, #204]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2204      	movs	r2, #4
 800151e:	4013      	ands	r3, r2
 8001520:	d1f1      	bne.n	8001506 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2210      	movs	r2, #16
 8001528:	4013      	ands	r3, r2
 800152a:	d100      	bne.n	800152e <HAL_RCC_OscConfig+0x27e>
 800152c:	e0a1      	b.n	8001672 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d140      	bne.n	80015b6 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001534:	4b2c      	ldr	r3, [pc, #176]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	2380      	movs	r3, #128	@ 0x80
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x29c>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e227      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800154c:	4b26      	ldr	r3, [pc, #152]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a2c      	ldr	r2, [pc, #176]	@ (8001604 <HAL_RCC_OscConfig+0x354>)
 8001552:	4013      	ands	r3, r2
 8001554:	0019      	movs	r1, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1a      	ldr	r2, [r3, #32]
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 800155c:	430a      	orrs	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001560:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	021b      	lsls	r3, r3, #8
 8001566:	0a19      	lsrs	r1, r3, #8
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	061a      	lsls	r2, r3, #24
 800156e:	4b1e      	ldr	r3, [pc, #120]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001570:	430a      	orrs	r2, r1
 8001572:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6a1b      	ldr	r3, [r3, #32]
 8001578:	0b5b      	lsrs	r3, r3, #13
 800157a:	3301      	adds	r3, #1
 800157c:	2280      	movs	r2, #128	@ 0x80
 800157e:	0212      	lsls	r2, r2, #8
 8001580:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	210f      	movs	r1, #15
 800158a:	400b      	ands	r3, r1
 800158c:	491a      	ldr	r1, [pc, #104]	@ (80015f8 <HAL_RCC_OscConfig+0x348>)
 800158e:	5ccb      	ldrb	r3, [r1, r3]
 8001590:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <HAL_RCC_OscConfig+0x34c>)
 8001594:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_RCC_OscConfig+0x350>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	2513      	movs	r5, #19
 800159c:	197c      	adds	r4, r7, r5
 800159e:	0018      	movs	r0, r3
 80015a0:	f7ff fa6a 	bl	8000a78 <HAL_InitTick>
 80015a4:	0003      	movs	r3, r0
 80015a6:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80015a8:	197b      	adds	r3, r7, r5
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d060      	beq.n	8001672 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80015b0:	197b      	adds	r3, r7, r5
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	e1f2      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d03f      	beq.n	800163e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <HAL_RCC_OscConfig+0x338>)
 80015c4:	2180      	movs	r1, #128	@ 0x80
 80015c6:	0049      	lsls	r1, r1, #1
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fa9a 	bl	8000b04 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015d4:	e018      	b.n	8001608 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa95 	bl	8000b04 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d911      	bls.n	8001608 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e1d9      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
 80015e8:	40021000 	.word	0x40021000
 80015ec:	fffeffff 	.word	0xfffeffff
 80015f0:	fffbffff 	.word	0xfffbffff
 80015f4:	ffffe0ff 	.word	0xffffe0ff
 80015f8:	0800250c 	.word	0x0800250c
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000004 	.word	0x20000004
 8001604:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001608:	4bc9      	ldr	r3, [pc, #804]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	2380      	movs	r3, #128	@ 0x80
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	4013      	ands	r3, r2
 8001612:	d0e0      	beq.n	80015d6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001614:	4bc6      	ldr	r3, [pc, #792]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4ac6      	ldr	r2, [pc, #792]	@ (8001934 <HAL_RCC_OscConfig+0x684>)
 800161a:	4013      	ands	r3, r2
 800161c:	0019      	movs	r1, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4bc3      	ldr	r3, [pc, #780]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001624:	430a      	orrs	r2, r1
 8001626:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001628:	4bc1      	ldr	r3, [pc, #772]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	021b      	lsls	r3, r3, #8
 800162e:	0a19      	lsrs	r1, r3, #8
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	061a      	lsls	r2, r3, #24
 8001636:	4bbe      	ldr	r3, [pc, #760]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	e019      	b.n	8001672 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800163e:	4bbc      	ldr	r3, [pc, #752]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4bbb      	ldr	r3, [pc, #748]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001644:	49bc      	ldr	r1, [pc, #752]	@ (8001938 <HAL_RCC_OscConfig+0x688>)
 8001646:	400a      	ands	r2, r1
 8001648:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fa5b 	bl	8000b04 <HAL_GetTick>
 800164e:	0003      	movs	r3, r0
 8001650:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001654:	f7ff fa56 	bl	8000b04 <HAL_GetTick>
 8001658:	0002      	movs	r2, r0
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e19a      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001666:	4bb2      	ldr	r3, [pc, #712]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	2380      	movs	r3, #128	@ 0x80
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2208      	movs	r2, #8
 8001678:	4013      	ands	r3, r2
 800167a:	d036      	beq.n	80016ea <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d019      	beq.n	80016b8 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001684:	4baa      	ldr	r3, [pc, #680]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001688:	4ba9      	ldr	r3, [pc, #676]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800168a:	2101      	movs	r1, #1
 800168c:	430a      	orrs	r2, r1
 800168e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001690:	f7ff fa38 	bl	8000b04 <HAL_GetTick>
 8001694:	0003      	movs	r3, r0
 8001696:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001698:	e008      	b.n	80016ac <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800169a:	f7ff fa33 	bl	8000b04 <HAL_GetTick>
 800169e:	0002      	movs	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	1ad3      	subs	r3, r2, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d901      	bls.n	80016ac <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80016a8:	2303      	movs	r3, #3
 80016aa:	e177      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80016ac:	4ba0      	ldr	r3, [pc, #640]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80016ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016b0:	2202      	movs	r2, #2
 80016b2:	4013      	ands	r3, r2
 80016b4:	d0f1      	beq.n	800169a <HAL_RCC_OscConfig+0x3ea>
 80016b6:	e018      	b.n	80016ea <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016b8:	4b9d      	ldr	r3, [pc, #628]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80016ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80016bc:	4b9c      	ldr	r3, [pc, #624]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80016be:	2101      	movs	r1, #1
 80016c0:	438a      	bics	r2, r1
 80016c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c4:	f7ff fa1e 	bl	8000b04 <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ce:	f7ff fa19 	bl	8000b04 <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e15d      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80016e0:	4b93      	ldr	r3, [pc, #588]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80016e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d1f1      	bne.n	80016ce <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2204      	movs	r2, #4
 80016f0:	4013      	ands	r3, r2
 80016f2:	d100      	bne.n	80016f6 <HAL_RCC_OscConfig+0x446>
 80016f4:	e0ae      	b.n	8001854 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f6:	2023      	movs	r0, #35	@ 0x23
 80016f8:	183b      	adds	r3, r7, r0
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016fe:	4b8c      	ldr	r3, [pc, #560]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001700:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001702:	2380      	movs	r3, #128	@ 0x80
 8001704:	055b      	lsls	r3, r3, #21
 8001706:	4013      	ands	r3, r2
 8001708:	d109      	bne.n	800171e <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800170a:	4b89      	ldr	r3, [pc, #548]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800170c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800170e:	4b88      	ldr	r3, [pc, #544]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001710:	2180      	movs	r1, #128	@ 0x80
 8001712:	0549      	lsls	r1, r1, #21
 8001714:	430a      	orrs	r2, r1
 8001716:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001718:	183b      	adds	r3, r7, r0
 800171a:	2201      	movs	r2, #1
 800171c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171e:	4b87      	ldr	r3, [pc, #540]	@ (800193c <HAL_RCC_OscConfig+0x68c>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	@ 0x80
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4013      	ands	r3, r2
 8001728:	d11a      	bne.n	8001760 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800172a:	4b84      	ldr	r3, [pc, #528]	@ (800193c <HAL_RCC_OscConfig+0x68c>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	4b83      	ldr	r3, [pc, #524]	@ (800193c <HAL_RCC_OscConfig+0x68c>)
 8001730:	2180      	movs	r1, #128	@ 0x80
 8001732:	0049      	lsls	r1, r1, #1
 8001734:	430a      	orrs	r2, r1
 8001736:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001738:	f7ff f9e4 	bl	8000b04 <HAL_GetTick>
 800173c:	0003      	movs	r3, r0
 800173e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001742:	f7ff f9df 	bl	8000b04 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b64      	cmp	r3, #100	@ 0x64
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e123      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001754:	4b79      	ldr	r3, [pc, #484]	@ (800193c <HAL_RCC_OscConfig+0x68c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2380      	movs	r3, #128	@ 0x80
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4013      	ands	r3, r2
 800175e:	d0f0      	beq.n	8001742 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	2380      	movs	r3, #128	@ 0x80
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	429a      	cmp	r2, r3
 800176a:	d107      	bne.n	800177c <HAL_RCC_OscConfig+0x4cc>
 800176c:	4b70      	ldr	r3, [pc, #448]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800176e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001770:	4b6f      	ldr	r3, [pc, #444]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001772:	2180      	movs	r1, #128	@ 0x80
 8001774:	0049      	lsls	r1, r1, #1
 8001776:	430a      	orrs	r2, r1
 8001778:	651a      	str	r2, [r3, #80]	@ 0x50
 800177a:	e031      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10c      	bne.n	800179e <HAL_RCC_OscConfig+0x4ee>
 8001784:	4b6a      	ldr	r3, [pc, #424]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001788:	4b69      	ldr	r3, [pc, #420]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800178a:	496b      	ldr	r1, [pc, #428]	@ (8001938 <HAL_RCC_OscConfig+0x688>)
 800178c:	400a      	ands	r2, r1
 800178e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001790:	4b67      	ldr	r3, [pc, #412]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001792:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001794:	4b66      	ldr	r3, [pc, #408]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001796:	496a      	ldr	r1, [pc, #424]	@ (8001940 <HAL_RCC_OscConfig+0x690>)
 8001798:	400a      	ands	r2, r1
 800179a:	651a      	str	r2, [r3, #80]	@ 0x50
 800179c:	e020      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	23a0      	movs	r3, #160	@ 0xa0
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d10e      	bne.n	80017c8 <HAL_RCC_OscConfig+0x518>
 80017aa:	4b61      	ldr	r3, [pc, #388]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017ae:	4b60      	ldr	r3, [pc, #384]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017b0:	2180      	movs	r1, #128	@ 0x80
 80017b2:	00c9      	lsls	r1, r1, #3
 80017b4:	430a      	orrs	r2, r1
 80017b6:	651a      	str	r2, [r3, #80]	@ 0x50
 80017b8:	4b5d      	ldr	r3, [pc, #372]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017bc:	4b5c      	ldr	r3, [pc, #368]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017be:	2180      	movs	r1, #128	@ 0x80
 80017c0:	0049      	lsls	r1, r1, #1
 80017c2:	430a      	orrs	r2, r1
 80017c4:	651a      	str	r2, [r3, #80]	@ 0x50
 80017c6:	e00b      	b.n	80017e0 <HAL_RCC_OscConfig+0x530>
 80017c8:	4b59      	ldr	r3, [pc, #356]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ca:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017cc:	4b58      	ldr	r3, [pc, #352]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017ce:	495a      	ldr	r1, [pc, #360]	@ (8001938 <HAL_RCC_OscConfig+0x688>)
 80017d0:	400a      	ands	r2, r1
 80017d2:	651a      	str	r2, [r3, #80]	@ 0x50
 80017d4:	4b56      	ldr	r3, [pc, #344]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80017d8:	4b55      	ldr	r3, [pc, #340]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80017da:	4959      	ldr	r1, [pc, #356]	@ (8001940 <HAL_RCC_OscConfig+0x690>)
 80017dc:	400a      	ands	r2, r1
 80017de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d015      	beq.n	8001814 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e8:	f7ff f98c 	bl	8000b04 <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017f0:	e009      	b.n	8001806 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f2:	f7ff f987 	bl	8000b04 <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a51      	ldr	r2, [pc, #324]	@ (8001944 <HAL_RCC_OscConfig+0x694>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e0ca      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001806:	4b4a      	ldr	r3, [pc, #296]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800180a:	2380      	movs	r3, #128	@ 0x80
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d0ef      	beq.n	80017f2 <HAL_RCC_OscConfig+0x542>
 8001812:	e014      	b.n	800183e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001814:	f7ff f976 	bl	8000b04 <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800181c:	e009      	b.n	8001832 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800181e:	f7ff f971 	bl	8000b04 <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	4a46      	ldr	r2, [pc, #280]	@ (8001944 <HAL_RCC_OscConfig+0x694>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e0b4      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001832:	4b3f      	ldr	r3, [pc, #252]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001834:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4013      	ands	r3, r2
 800183c:	d1ef      	bne.n	800181e <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800183e:	2323      	movs	r3, #35	@ 0x23
 8001840:	18fb      	adds	r3, r7, r3
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d105      	bne.n	8001854 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001848:	4b39      	ldr	r3, [pc, #228]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800184a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800184c:	4b38      	ldr	r3, [pc, #224]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 800184e:	493e      	ldr	r1, [pc, #248]	@ (8001948 <HAL_RCC_OscConfig+0x698>)
 8001850:	400a      	ands	r2, r1
 8001852:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001858:	2b00      	cmp	r3, #0
 800185a:	d100      	bne.n	800185e <HAL_RCC_OscConfig+0x5ae>
 800185c:	e09d      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2b0c      	cmp	r3, #12
 8001862:	d100      	bne.n	8001866 <HAL_RCC_OscConfig+0x5b6>
 8001864:	e076      	b.n	8001954 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800186a:	2b02      	cmp	r3, #2
 800186c:	d145      	bne.n	80018fa <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b30      	ldr	r3, [pc, #192]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	4b2f      	ldr	r3, [pc, #188]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001874:	4935      	ldr	r1, [pc, #212]	@ (800194c <HAL_RCC_OscConfig+0x69c>)
 8001876:	400a      	ands	r2, r1
 8001878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800187a:	f7ff f943 	bl	8000b04 <HAL_GetTick>
 800187e:	0003      	movs	r3, r0
 8001880:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001884:	f7ff f93e 	bl	8000b04 <HAL_GetTick>
 8001888:	0002      	movs	r2, r0
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e082      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001896:	4b26      	ldr	r3, [pc, #152]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	2380      	movs	r3, #128	@ 0x80
 800189c:	049b      	lsls	r3, r3, #18
 800189e:	4013      	ands	r3, r2
 80018a0:	d1f0      	bne.n	8001884 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018a2:	4b23      	ldr	r3, [pc, #140]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	4a2a      	ldr	r2, [pc, #168]	@ (8001950 <HAL_RCC_OscConfig+0x6a0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	0019      	movs	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	431a      	orrs	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ba:	431a      	orrs	r2, r3
 80018bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018be:	430a      	orrs	r2, r1
 80018c0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018c2:	4b1b      	ldr	r3, [pc, #108]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018c8:	2180      	movs	r1, #128	@ 0x80
 80018ca:	0449      	lsls	r1, r1, #17
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d0:	f7ff f918 	bl	8000b04 <HAL_GetTick>
 80018d4:	0003      	movs	r3, r0
 80018d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff f913 	bl	8000b04 <HAL_GetTick>
 80018de:	0002      	movs	r2, r0
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e057      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018ec:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	049b      	lsls	r3, r3, #18
 80018f4:	4013      	ands	r3, r2
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x62a>
 80018f8:	e04f      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001900:	4912      	ldr	r1, [pc, #72]	@ (800194c <HAL_RCC_OscConfig+0x69c>)
 8001902:	400a      	ands	r2, r1
 8001904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f8fd 	bl	8000b04 <HAL_GetTick>
 800190a:	0003      	movs	r3, r0
 800190c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff f8f8 	bl	8000b04 <HAL_GetTick>
 8001914:	0002      	movs	r2, r0
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e03c      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001922:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <HAL_RCC_OscConfig+0x680>)
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	049b      	lsls	r3, r3, #18
 800192a:	4013      	ands	r3, r2
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x660>
 800192e:	e034      	b.n	800199a <HAL_RCC_OscConfig+0x6ea>
 8001930:	40021000 	.word	0x40021000
 8001934:	ffff1fff 	.word	0xffff1fff
 8001938:	fffffeff 	.word	0xfffffeff
 800193c:	40007000 	.word	0x40007000
 8001940:	fffffbff 	.word	0xfffffbff
 8001944:	00001388 	.word	0x00001388
 8001948:	efffffff 	.word	0xefffffff
 800194c:	feffffff 	.word	0xfeffffff
 8001950:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01d      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <HAL_RCC_OscConfig+0x6f4>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	2380      	movs	r3, #128	@ 0x80
 800196a:	025b      	lsls	r3, r3, #9
 800196c:	401a      	ands	r2, r3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001972:	429a      	cmp	r2, r3
 8001974:	d10f      	bne.n	8001996 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	23f0      	movs	r3, #240	@ 0xf0
 800197a:	039b      	lsls	r3, r3, #14
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001982:	429a      	cmp	r2, r3
 8001984:	d107      	bne.n	8001996 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	23c0      	movs	r3, #192	@ 0xc0
 800198a:	041b      	lsls	r3, r3, #16
 800198c:	401a      	ands	r2, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001992:	429a      	cmp	r2, r3
 8001994:	d001      	beq.n	800199a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e000      	b.n	800199c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b00a      	add	sp, #40	@ 0x28
 80019a2:	bdb0      	pop	{r4, r5, r7, pc}
 80019a4:	40021000 	.word	0x40021000

080019a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019a8:	b5b0      	push	{r4, r5, r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e128      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019bc:	4b96      	ldr	r3, [pc, #600]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2201      	movs	r2, #1
 80019c2:	4013      	ands	r3, r2
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d91e      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ca:	4b93      	ldr	r3, [pc, #588]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4393      	bics	r3, r2
 80019d2:	0019      	movs	r1, r3
 80019d4:	4b90      	ldr	r3, [pc, #576]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019dc:	f7ff f892 	bl	8000b04 <HAL_GetTick>
 80019e0:	0003      	movs	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e4:	e009      	b.n	80019fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019e6:	f7ff f88d 	bl	8000b04 <HAL_GetTick>
 80019ea:	0002      	movs	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	4a8a      	ldr	r2, [pc, #552]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e109      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b87      	ldr	r3, [pc, #540]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	4013      	ands	r3, r2
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d1ee      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2202      	movs	r2, #2
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d009      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a12:	4b83      	ldr	r3, [pc, #524]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	22f0      	movs	r2, #240	@ 0xf0
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	4b7f      	ldr	r3, [pc, #508]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_ClockConfig+0x8a>
 8001a30:	e089      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a3a:	4b79      	ldr	r3, [pc, #484]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	@ 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d120      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e0e1      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a52:	4b73      	ldr	r3, [pc, #460]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0d5      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d106      	bne.n	8001a78 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a6a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2204      	movs	r2, #4
 8001a70:	4013      	ands	r3, r2
 8001a72:	d109      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e0ca      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a78:	4b69      	ldr	r3, [pc, #420]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0c2      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b65      	ldr	r3, [pc, #404]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b62      	ldr	r3, [pc, #392]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f832 	bl	8000b04 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d111      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001aac:	e009      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aae:	f7ff f829 	bl	8000b04 <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	4a58      	ldr	r2, [pc, #352]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e0a5      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac2:	4b57      	ldr	r3, [pc, #348]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001ac4:	68db      	ldr	r3, [r3, #12]
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b08      	cmp	r3, #8
 8001acc:	d1ef      	bne.n	8001aae <HAL_RCC_ClockConfig+0x106>
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d111      	bne.n	8001afc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ada:	f7ff f813 	bl	8000b04 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a4d      	ldr	r2, [pc, #308]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e08f      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aee:	4b4c      	ldr	r3, [pc, #304]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	220c      	movs	r2, #12
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b0c      	cmp	r3, #12
 8001af8:	d1ef      	bne.n	8001ada <HAL_RCC_ClockConfig+0x132>
 8001afa:	e024      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d11b      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b04:	e009      	b.n	8001b1a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b06:	f7fe fffd 	bl	8000b04 <HAL_GetTick>
 8001b0a:	0002      	movs	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	4a42      	ldr	r2, [pc, #264]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e079      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b41      	ldr	r3, [pc, #260]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d1ef      	bne.n	8001b06 <HAL_RCC_ClockConfig+0x15e>
 8001b26:	e00e      	b.n	8001b46 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b28:	f7fe ffec 	bl	8000b04 <HAL_GetTick>
 8001b2c:	0002      	movs	r2, r0
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	4a3a      	ldr	r2, [pc, #232]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e068      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b3c:	4b38      	ldr	r3, [pc, #224]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	220c      	movs	r2, #12
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b46:	4b34      	ldr	r3, [pc, #208]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d21e      	bcs.n	8001b92 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b54:	4b30      	ldr	r3, [pc, #192]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4393      	bics	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	430a      	orrs	r2, r1
 8001b64:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b66:	f7fe ffcd 	bl	8000b04 <HAL_GetTick>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b6e:	e009      	b.n	8001b84 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7fe ffc8 	bl	8000b04 <HAL_GetTick>
 8001b74:	0002      	movs	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	4a28      	ldr	r2, [pc, #160]	@ (8001c1c <HAL_RCC_ClockConfig+0x274>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e044      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b84:	4b24      	ldr	r3, [pc, #144]	@ (8001c18 <HAL_RCC_ClockConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2204      	movs	r2, #4
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d009      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b9c:	4b20      	ldr	r3, [pc, #128]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4a20      	ldr	r2, [pc, #128]	@ (8001c24 <HAL_RCC_ClockConfig+0x27c>)
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	0019      	movs	r1, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68da      	ldr	r2, [r3, #12]
 8001baa:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bac:	430a      	orrs	r2, r1
 8001bae:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2208      	movs	r2, #8
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d00a      	beq.n	8001bd0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	4a1a      	ldr	r2, [pc, #104]	@ (8001c28 <HAL_RCC_ClockConfig+0x280>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	0019      	movs	r1, r3
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	00da      	lsls	r2, r3, #3
 8001bca:	4b15      	ldr	r3, [pc, #84]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bd0:	f000 f832 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bd4:	0001      	movs	r1, r0
 8001bd6:	4b12      	ldr	r3, [pc, #72]	@ (8001c20 <HAL_RCC_ClockConfig+0x278>)
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	091b      	lsrs	r3, r3, #4
 8001bdc:	220f      	movs	r2, #15
 8001bde:	4013      	ands	r3, r2
 8001be0:	4a12      	ldr	r2, [pc, #72]	@ (8001c2c <HAL_RCC_ClockConfig+0x284>)
 8001be2:	5cd3      	ldrb	r3, [r2, r3]
 8001be4:	000a      	movs	r2, r1
 8001be6:	40da      	lsrs	r2, r3
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <HAL_RCC_ClockConfig+0x288>)
 8001bea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bec:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_RCC_ClockConfig+0x28c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	250b      	movs	r5, #11
 8001bf2:	197c      	adds	r4, r7, r5
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7fe ff3f 	bl	8000a78 <HAL_InitTick>
 8001bfa:	0003      	movs	r3, r0
 8001bfc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bfe:	197b      	adds	r3, r7, r5
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001c06:	197b      	adds	r3, r7, r5
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	e000      	b.n	8001c0e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	0018      	movs	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b004      	add	sp, #16
 8001c14:	bdb0      	pop	{r4, r5, r7, pc}
 8001c16:	46c0      	nop			@ (mov r8, r8)
 8001c18:	40022000 	.word	0x40022000
 8001c1c:	00001388 	.word	0x00001388
 8001c20:	40021000 	.word	0x40021000
 8001c24:	fffff8ff 	.word	0xfffff8ff
 8001c28:	ffffc7ff 	.word	0xffffc7ff
 8001c2c:	0800250c 	.word	0x0800250c
 8001c30:	20000000 	.word	0x20000000
 8001c34:	20000004 	.word	0x20000004

08001c38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08e      	sub	sp, #56	@ 0x38
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c3e:	4b4c      	ldr	r3, [pc, #304]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c46:	230c      	movs	r3, #12
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d014      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x40>
 8001c4e:	d900      	bls.n	8001c52 <HAL_RCC_GetSysClockFreq+0x1a>
 8001c50:	e07b      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x112>
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	d002      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x24>
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d00b      	beq.n	8001c72 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c5a:	e076      	b.n	8001d4a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c5c:	4b44      	ldr	r3, [pc, #272]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2210      	movs	r2, #16
 8001c62:	4013      	ands	r3, r2
 8001c64:	d002      	beq.n	8001c6c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c66:	4b43      	ldr	r3, [pc, #268]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c68:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c6a:	e07c      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c6c:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c6e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c70:	e079      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c72:	4b42      	ldr	r3, [pc, #264]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c74:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001c76:	e076      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c7a:	0c9a      	lsrs	r2, r3, #18
 8001c7c:	230f      	movs	r3, #15
 8001c7e:	401a      	ands	r2, r3
 8001c80:	4b3f      	ldr	r3, [pc, #252]	@ (8001d80 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c82:	5c9b      	ldrb	r3, [r3, r2]
 8001c84:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c88:	0d9a      	lsrs	r2, r3, #22
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	3301      	adds	r3, #1
 8001c90:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c92:	4b37      	ldr	r3, [pc, #220]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	2380      	movs	r3, #128	@ 0x80
 8001c98:	025b      	lsls	r3, r3, #9
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d01a      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
 8001ca6:	4a35      	ldr	r2, [pc, #212]	@ (8001d7c <HAL_RCC_GetSysClockFreq+0x144>)
 8001ca8:	2300      	movs	r3, #0
 8001caa:	69b8      	ldr	r0, [r7, #24]
 8001cac:	69f9      	ldr	r1, [r7, #28]
 8001cae:	f7fe fad7 	bl	8000260 <__aeabi_lmul>
 8001cb2:	0002      	movs	r2, r0
 8001cb4:	000b      	movs	r3, r1
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	0019      	movs	r1, r3
 8001cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cbc:	613b      	str	r3, [r7, #16]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	f7fe faab 	bl	8000220 <__aeabi_uldivmod>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	000b      	movs	r3, r1
 8001cce:	0013      	movs	r3, r2
 8001cd0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001cd2:	e037      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001cd4:	4b26      	ldr	r3, [pc, #152]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d01a      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	4a23      	ldr	r2, [pc, #140]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ce8:	2300      	movs	r3, #0
 8001cea:	68b8      	ldr	r0, [r7, #8]
 8001cec:	68f9      	ldr	r1, [r7, #12]
 8001cee:	f7fe fab7 	bl	8000260 <__aeabi_lmul>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	000b      	movs	r3, r1
 8001cf6:	0010      	movs	r0, r2
 8001cf8:	0019      	movs	r1, r3
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	603b      	str	r3, [r7, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f7fe fa8b 	bl	8000220 <__aeabi_uldivmod>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	000b      	movs	r3, r1
 8001d0e:	0013      	movs	r3, r2
 8001d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d12:	e017      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d16:	0018      	movs	r0, r3
 8001d18:	2300      	movs	r3, #0
 8001d1a:	0019      	movs	r1, r3
 8001d1c:	4a16      	ldr	r2, [pc, #88]	@ (8001d78 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f7fe fa9e 	bl	8000260 <__aeabi_lmul>
 8001d24:	0002      	movs	r2, r0
 8001d26:	000b      	movs	r3, r1
 8001d28:	0010      	movs	r0, r2
 8001d2a:	0019      	movs	r1, r3
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2e:	001c      	movs	r4, r3
 8001d30:	2300      	movs	r3, #0
 8001d32:	001d      	movs	r5, r3
 8001d34:	0022      	movs	r2, r4
 8001d36:	002b      	movs	r3, r5
 8001d38:	f7fe fa72 	bl	8000220 <__aeabi_uldivmod>
 8001d3c:	0002      	movs	r2, r0
 8001d3e:	000b      	movs	r3, r1
 8001d40:	0013      	movs	r3, r2
 8001d42:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d48:	e00d      	b.n	8001d66 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d4a:	4b09      	ldr	r3, [pc, #36]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	0b5b      	lsrs	r3, r3, #13
 8001d50:	2207      	movs	r2, #7
 8001d52:	4013      	ands	r3, r2
 8001d54:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d56:	6a3b      	ldr	r3, [r7, #32]
 8001d58:	3301      	adds	r3, #1
 8001d5a:	2280      	movs	r2, #128	@ 0x80
 8001d5c:	0212      	lsls	r2, r2, #8
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	0013      	movs	r3, r2
 8001d62:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8001d64:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 8001d68:	0018      	movs	r0, r3
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	b00e      	add	sp, #56	@ 0x38
 8001d6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d70:	40021000 	.word	0x40021000
 8001d74:	003d0900 	.word	0x003d0900
 8001d78:	00f42400 	.word	0x00f42400
 8001d7c:	007a1200 	.word	0x007a1200
 8001d80:	0800251c 	.word	0x0800251c

08001d84 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d8c:	2017      	movs	r0, #23
 8001d8e:	183b      	adds	r3, r7, r0
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2220      	movs	r2, #32
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d100      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001d9e:	e0c7      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da0:	4b93      	ldr	r3, [pc, #588]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001da2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001da4:	2380      	movs	r3, #128	@ 0x80
 8001da6:	055b      	lsls	r3, r3, #21
 8001da8:	4013      	ands	r3, r2
 8001daa:	d109      	bne.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dac:	4b90      	ldr	r3, [pc, #576]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001dae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001db0:	4b8f      	ldr	r3, [pc, #572]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001db2:	2180      	movs	r1, #128	@ 0x80
 8001db4:	0549      	lsls	r1, r1, #21
 8001db6:	430a      	orrs	r2, r1
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8001dba:	183b      	adds	r3, r7, r0
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	2380      	movs	r3, #128	@ 0x80
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d11a      	bne.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dcc:	4b89      	ldr	r3, [pc, #548]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001dd2:	2180      	movs	r1, #128	@ 0x80
 8001dd4:	0049      	lsls	r1, r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dda:	f7fe fe93 	bl	8000b04 <HAL_GetTick>
 8001dde:	0003      	movs	r3, r0
 8001de0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de2:	e008      	b.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de4:	f7fe fe8e 	bl	8000b04 <HAL_GetTick>
 8001de8:	0002      	movs	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	@ 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e0f8      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	2380      	movs	r3, #128	@ 0x80
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d0f0      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e02:	4b7b      	ldr	r3, [pc, #492]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	23c0      	movs	r3, #192	@ 0xc0
 8001e08:	039b      	lsls	r3, r3, #14
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	23c0      	movs	r3, #192	@ 0xc0
 8001e14:	039b      	lsls	r3, r3, #14
 8001e16:	4013      	ands	r3, r2
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d013      	beq.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	23c0      	movs	r3, #192	@ 0xc0
 8001e24:	029b      	lsls	r3, r3, #10
 8001e26:	401a      	ands	r2, r3
 8001e28:	23c0      	movs	r3, #192	@ 0xc0
 8001e2a:	029b      	lsls	r3, r3, #10
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d10a      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e30:	4b6f      	ldr	r3, [pc, #444]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	@ 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	029b      	lsls	r3, r3, #10
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d101      	bne.n	8001e46 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0d0      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e46:	4b6a      	ldr	r3, [pc, #424]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e4a:	23c0      	movs	r3, #192	@ 0xc0
 8001e4c:	029b      	lsls	r3, r3, #10
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d03b      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685a      	ldr	r2, [r3, #4]
 8001e5c:	23c0      	movs	r3, #192	@ 0xc0
 8001e5e:	029b      	lsls	r3, r3, #10
 8001e60:	4013      	ands	r3, r2
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d033      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d02e      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e72:	4b5f      	ldr	r3, [pc, #380]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e76:	4a60      	ldr	r2, [pc, #384]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001e78:	4013      	ands	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e80:	4b5b      	ldr	r3, [pc, #364]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e82:	2180      	movs	r1, #128	@ 0x80
 8001e84:	0309      	lsls	r1, r1, #12
 8001e86:	430a      	orrs	r2, r1
 8001e88:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8a:	4b59      	ldr	r3, [pc, #356]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001e8e:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e90:	495a      	ldr	r1, [pc, #360]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8001e92:	400a      	ands	r2, r1
 8001e94:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001e96:	4b56      	ldr	r3, [pc, #344]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	2380      	movs	r3, #128	@ 0x80
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d014      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea6:	f7fe fe2d 	bl	8000b04 <HAL_GetTick>
 8001eaa:	0003      	movs	r3, r0
 8001eac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eae:	e009      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb0:	f7fe fe28 	bl	8000b04 <HAL_GetTick>
 8001eb4:	0002      	movs	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	4a51      	ldr	r2, [pc, #324]	@ (8002000 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e091      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x264>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ec4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001ec6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8001ec8:	2380      	movs	r3, #128	@ 0x80
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2220      	movs	r2, #32
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	d01f      	beq.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	23c0      	movs	r3, #192	@ 0xc0
 8001ee0:	029b      	lsls	r3, r3, #10
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	23c0      	movs	r3, #192	@ 0xc0
 8001ee6:	029b      	lsls	r3, r3, #10
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d10c      	bne.n	8001f06 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8001eec:	4b40      	ldr	r3, [pc, #256]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a44      	ldr	r2, [pc, #272]	@ (8002004 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	23c0      	movs	r3, #192	@ 0xc0
 8001efc:	039b      	lsls	r3, r3, #14
 8001efe:	401a      	ands	r2, r3
 8001f00:	4b3b      	ldr	r3, [pc, #236]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f08:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	23c0      	movs	r3, #192	@ 0xc0
 8001f10:	029b      	lsls	r3, r3, #10
 8001f12:	401a      	ands	r2, r3
 8001f14:	4b36      	ldr	r3, [pc, #216]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f16:	430a      	orrs	r2, r1
 8001f18:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1a:	2317      	movs	r3, #23
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d105      	bne.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f24:	4b32      	ldr	r3, [pc, #200]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001f28:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f2a:	4937      	ldr	r1, [pc, #220]	@ (8002008 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8001f2c:	400a      	ands	r2, r1
 8001f2e:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	d009      	beq.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3e:	2203      	movs	r2, #3
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	4b29      	ldr	r3, [pc, #164]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	d009      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f58:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f5c:	220c      	movs	r2, #12
 8001f5e:	4393      	bics	r3, r2
 8001f60:	0019      	movs	r1, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	4b22      	ldr	r3, [pc, #136]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2204      	movs	r2, #4
 8001f72:	4013      	ands	r3, r2
 8001f74:	d009      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f7a:	4a24      	ldr	r2, [pc, #144]	@ (800200c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	0019      	movs	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f86:	430a      	orrs	r2, r1
 8001f88:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2208      	movs	r2, #8
 8001f90:	4013      	ands	r3, r2
 8001f92:	d009      	beq.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f94:	4b16      	ldr	r3, [pc, #88]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f98:	4a1d      	ldr	r2, [pc, #116]	@ (8002010 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	4b13      	ldr	r3, [pc, #76]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2380      	movs	r3, #128	@ 0x80
 8001fae:	005b      	lsls	r3, r3, #1
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	d009      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb8:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	0019      	movs	r1, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699a      	ldr	r2, [r3, #24]
 8001fc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	64da      	str	r2, [r3, #76]	@ 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001fd2:	4b07      	ldr	r3, [pc, #28]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002014 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69da      	ldr	r2, [r3, #28]
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8001fe6:	2300      	movs	r3, #0
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b006      	add	sp, #24
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
 8001ff8:	fffcffff 	.word	0xfffcffff
 8001ffc:	fff7ffff 	.word	0xfff7ffff
 8002000:	00001388 	.word	0x00001388
 8002004:	ffcfffff 	.word	0xffcfffff
 8002008:	efffffff 	.word	0xefffffff
 800200c:	fffff3ff 	.word	0xfffff3ff
 8002010:	ffffcfff 	.word	0xffffcfff
 8002014:	fff3ffff 	.word	0xfff3ffff

08002018 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002018:	b5b0      	push	{r4, r5, r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002020:	230f      	movs	r3, #15
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2201      	movs	r2, #1
 8002026:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e088      	b.n	8002144 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2221      	movs	r2, #33	@ 0x21
 8002036:	5c9b      	ldrb	r3, [r3, r2]
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d107      	bne.n	800204e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2220      	movs	r2, #32
 8002042:	2100      	movs	r1, #0
 8002044:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f7fe fc7f 	bl	800094c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2221      	movs	r2, #33	@ 0x21
 8002052:	2102      	movs	r1, #2
 8002054:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	2210      	movs	r2, #16
 800205e:	4013      	ands	r3, r2
 8002060:	2b10      	cmp	r3, #16
 8002062:	d05f      	beq.n	8002124 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	22ca      	movs	r2, #202	@ 0xca
 800206a:	625a      	str	r2, [r3, #36]	@ 0x24
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2253      	movs	r2, #83	@ 0x53
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002074:	250f      	movs	r5, #15
 8002076:	197c      	adds	r4, r7, r5
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	0018      	movs	r0, r3
 800207c:	f000 f890 	bl	80021a0 <RTC_EnterInitMode>
 8002080:	0003      	movs	r3, r0
 8002082:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8002084:	0028      	movs	r0, r5
 8002086:	183b      	adds	r3, r7, r0
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d12c      	bne.n	80020e8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	492c      	ldr	r1, [pc, #176]	@ (800214c <HAL_RTC_Init+0x134>)
 800209a:	400a      	ands	r2, r1
 800209c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6899      	ldr	r1, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	691b      	ldr	r3, [r3, #16]
 80020ac:	431a      	orrs	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	431a      	orrs	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	430a      	orrs	r2, r1
 80020ba:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68d2      	ldr	r2, [r2, #12]
 80020c4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6919      	ldr	r1, [r3, #16]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80020da:	183c      	adds	r4, r7, r0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	0018      	movs	r0, r3
 80020e0:	f000 f8a2 	bl	8002228 <RTC_ExitInitMode>
 80020e4:	0003      	movs	r3, r0
 80020e6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80020e8:	230f      	movs	r3, #15
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d113      	bne.n	800211a <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2103      	movs	r1, #3
 80020fe:	438a      	bics	r2, r1
 8002100:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	69da      	ldr	r2, [r3, #28]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	431a      	orrs	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	22ff      	movs	r2, #255	@ 0xff
 8002120:	625a      	str	r2, [r3, #36]	@ 0x24
 8002122:	e003      	b.n	800212c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002124:	230f      	movs	r3, #15
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800212c:	230f      	movs	r3, #15
 800212e:	18fb      	adds	r3, r7, r3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2221      	movs	r2, #33	@ 0x21
 800213a:	2101      	movs	r1, #1
 800213c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800213e:	230f      	movs	r3, #15
 8002140:	18fb      	adds	r3, r7, r3
 8002142:	781b      	ldrb	r3, [r3, #0]
}
 8002144:	0018      	movs	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	b004      	add	sp, #16
 800214a:	bdb0      	pop	{r4, r5, r7, pc}
 800214c:	ff8fffbf 	.word	0xff8fffbf

08002150 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a0e      	ldr	r2, [pc, #56]	@ (800219c <HAL_RTC_WaitForSynchro+0x4c>)
 8002162:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002164:	f7fe fcce 	bl	8000b04 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800216c:	e00a      	b.n	8002184 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800216e:	f7fe fcc9 	bl	8000b04 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	1ad2      	subs	r2, r2, r3
 8002178:	23fa      	movs	r3, #250	@ 0xfa
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	429a      	cmp	r2, r3
 800217e:	d901      	bls.n	8002184 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8002180:	2303      	movs	r3, #3
 8002182:	e006      	b.n	8002192 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2220      	movs	r2, #32
 800218c:	4013      	ands	r3, r2
 800218e:	d0ee      	beq.n	800216e <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	0001ff5f 	.word	0x0001ff5f

080021a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	230f      	movs	r3, #15
 80021ae:	18fb      	adds	r3, r7, r3
 80021b0:	2200      	movs	r2, #0
 80021b2:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2240      	movs	r2, #64	@ 0x40
 80021bc:	4013      	ands	r3, r2
 80021be:	d12c      	bne.n	800221a <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2180      	movs	r1, #128	@ 0x80
 80021cc:	430a      	orrs	r2, r1
 80021ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80021d0:	f7fe fc98 	bl	8000b04 <HAL_GetTick>
 80021d4:	0003      	movs	r3, r0
 80021d6:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80021d8:	e014      	b.n	8002204 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021da:	f7fe fc93 	bl	8000b04 <HAL_GetTick>
 80021de:	0002      	movs	r2, r0
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	200f      	movs	r0, #15
 80021e6:	183b      	adds	r3, r7, r0
 80021e8:	1839      	adds	r1, r7, r0
 80021ea:	7809      	ldrb	r1, [r1, #0]
 80021ec:	7019      	strb	r1, [r3, #0]
 80021ee:	23fa      	movs	r3, #250	@ 0xfa
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d906      	bls.n	8002204 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2221      	movs	r2, #33	@ 0x21
 80021fa:	2104      	movs	r1, #4
 80021fc:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 80021fe:	183b      	adds	r3, r7, r0
 8002200:	2201      	movs	r2, #1
 8002202:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2240      	movs	r2, #64	@ 0x40
 800220c:	4013      	ands	r3, r2
 800220e:	d104      	bne.n	800221a <RTC_EnterInitMode+0x7a>
 8002210:	230f      	movs	r3, #15
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d1df      	bne.n	80021da <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800221a:	230f      	movs	r3, #15
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b004      	add	sp, #16
 8002226:	bd80      	pop	{r7, pc}

08002228 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	240f      	movs	r4, #15
 8002232:	193b      	adds	r3, r7, r4
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	2180      	movs	r1, #128	@ 0x80
 8002244:	438a      	bics	r2, r1
 8002246:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2220      	movs	r2, #32
 8002250:	4013      	ands	r3, r2
 8002252:	d10c      	bne.n	800226e <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	0018      	movs	r0, r3
 8002258:	f7ff ff7a 	bl	8002150 <HAL_RTC_WaitForSynchro>
 800225c:	1e03      	subs	r3, r0, #0
 800225e:	d006      	beq.n	800226e <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2221      	movs	r2, #33	@ 0x21
 8002264:	2104      	movs	r1, #4
 8002266:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8002268:	193b      	adds	r3, r7, r4
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800226e:	230f      	movs	r3, #15
 8002270:	18fb      	adds	r3, r7, r3
 8002272:	781b      	ldrb	r3, [r3, #0]
}
 8002274:	0018      	movs	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	b005      	add	sp, #20
 800227a:	bd90      	pop	{r4, r7, pc}

0800227c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8002288:	4b64      	ldr	r3, [pc, #400]	@ (800241c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	22fa      	movs	r2, #250	@ 0xfa
 800228e:	01d1      	lsls	r1, r2, #7
 8002290:	0018      	movs	r0, r3
 8002292:	f7fd ff39 	bl	8000108 <__udivsi3>
 8002296:	0003      	movs	r3, r0
 8002298:	001a      	movs	r2, r3
 800229a:	0013      	movs	r3, r2
 800229c:	015b      	lsls	r3, r3, #5
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	189b      	adds	r3, r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2220      	movs	r2, #32
 80022ac:	5c9b      	ldrb	r3, [r3, r2]
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x3a>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0ad      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2220      	movs	r2, #32
 80022ba:	2101      	movs	r1, #1
 80022bc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	@ 0x21
 80022c2:	2102      	movs	r1, #2
 80022c4:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ca      	movs	r2, #202	@ 0xca
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2253      	movs	r2, #83	@ 0x53
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled */
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	2380      	movs	r3, #128	@ 0x80
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4013      	ands	r3, r2
 80022e2:	d019      	beq.n	8002318 <HAL_RTCEx_SetWakeUpTimer_IT+0x9c>
  {
    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    do
    {
      count = count - 1U;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10d      	bne.n	800230c <HAL_RTCEx_SetWakeUpTimer_IT+0x90>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	22ff      	movs	r2, #255	@ 0xff
 80022f6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2221      	movs	r2, #33	@ 0x21
 80022fc:	2103      	movs	r1, #3
 80022fe:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2220      	movs	r2, #32
 8002304:	2100      	movs	r1, #0
 8002306:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e082      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
      }
    } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	2204      	movs	r2, #4
 8002314:	4013      	ands	r3, r2
 8002316:	d1e5      	bne.n	80022e4 <HAL_RTCEx_SetWakeUpTimer_IT+0x68>
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	493f      	ldr	r1, [pc, #252]	@ (8002420 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a4>)
 8002324:	400a      	ands	r2, r1
 8002326:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	22ff      	movs	r2, #255	@ 0xff
 8002330:	401a      	ands	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	493b      	ldr	r1, [pc, #236]	@ (8002424 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a8>)
 8002338:	430a      	orrs	r2, r1
 800233a:	60da      	str	r2, [r3, #12]

  /* Reload the counter */
  count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800233c:	4b37      	ldr	r3, [pc, #220]	@ (800241c <HAL_RTCEx_SetWakeUpTimer_IT+0x1a0>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	22fa      	movs	r2, #250	@ 0xfa
 8002342:	01d1      	lsls	r1, r2, #7
 8002344:	0018      	movs	r0, r3
 8002346:	f7fd fedf 	bl	8000108 <__udivsi3>
 800234a:	0003      	movs	r3, r0
 800234c:	001a      	movs	r2, r3
 800234e:	0013      	movs	r3, r2
 8002350:	015b      	lsls	r3, r3, #5
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	189b      	adds	r3, r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  do
  {
    count = count - 1U;
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3b01      	subs	r3, #1
 8002360:	617b      	str	r3, [r7, #20]
    if (count == 0U)
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d10d      	bne.n	8002384 <HAL_RTCEx_SetWakeUpTimer_IT+0x108>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	22ff      	movs	r2, #255	@ 0xff
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2221      	movs	r2, #33	@ 0x21
 8002374:	2103      	movs	r1, #3
 8002376:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2220      	movs	r2, #32
 800237c:	2100      	movs	r1, #0
 800237e:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e046      	b.n	8002412 <HAL_RTCEx_SetWakeUpTimer_IT+0x196>
    }
  } while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2204      	movs	r2, #4
 800238c:	4013      	ands	r3, r2
 800238e:	d0e5      	beq.n	800235c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2107      	movs	r1, #7
 800239c:	438a      	bics	r2, r1
 800239e:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	615a      	str	r2, [r3, #20]

  /* RTC wakeup timer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b1a      	ldr	r3, [pc, #104]	@ (8002428 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80023be:	2180      	movs	r1, #128	@ 0x80
 80023c0:	0349      	lsls	r1, r1, #13
 80023c2:	430a      	orrs	r2, r1
 80023c4:	601a      	str	r2, [r3, #0]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80023c6:	4b18      	ldr	r3, [pc, #96]	@ (8002428 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	4b17      	ldr	r3, [pc, #92]	@ (8002428 <HAL_RTCEx_SetWakeUpTimer_IT+0x1ac>)
 80023cc:	2180      	movs	r1, #128	@ 0x80
 80023ce:	0349      	lsls	r1, r1, #13
 80023d0:	430a      	orrs	r2, r1
 80023d2:	609a      	str	r2, [r3, #8]

  /* Configure the interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2180      	movs	r1, #128	@ 0x80
 80023e0:	01c9      	lsls	r1, r1, #7
 80023e2:	430a      	orrs	r2, r1
 80023e4:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2180      	movs	r1, #128	@ 0x80
 80023f2:	00c9      	lsls	r1, r1, #3
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	22ff      	movs	r2, #255	@ 0xff
 80023fe:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2221      	movs	r2, #33	@ 0x21
 8002404:	2101      	movs	r1, #1
 8002406:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2220      	movs	r2, #32
 800240c:	2100      	movs	r1, #0
 800240e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002410:	2300      	movs	r3, #0
}
 8002412:	0018      	movs	r0, r3
 8002414:	46bd      	mov	sp, r7
 8002416:	b006      	add	sp, #24
 8002418:	bd80      	pop	{r7, pc}
 800241a:	46c0      	nop			@ (mov r8, r8)
 800241c:	20000000 	.word	0x20000000
 8002420:	fffffbff 	.word	0xfffffbff
 8002424:	fffffb7f 	.word	0xfffffb7f
 8002428:	40010400 	.word	0x40010400

0800242c <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8002434:	4b13      	ldr	r3, [pc, #76]	@ (8002484 <HAL_RTCEx_WakeUpTimerIRQHandler+0x58>)
 8002436:	2280      	movs	r2, #128	@ 0x80
 8002438:	0352      	lsls	r2, r2, #13
 800243a:	615a      	str	r2, [r3, #20]

  /* Get the Wakeup timer interrupt source enable status */
  if (__HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(hrtc, RTC_IT_WUT) != RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	2380      	movs	r3, #128	@ 0x80
 8002444:	01db      	lsls	r3, r3, #7
 8002446:	4013      	ands	r3, r2
 8002448:	d014      	beq.n	8002474 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
  {
    /* Get the pending status of the Wakeup timer Interrupt */
    if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4013      	ands	r3, r2
 8002456:	d00d      	beq.n	8002474 <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>
    {
      /* Clear the Wakeup timer interrupt pending bit */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	22ff      	movs	r2, #255	@ 0xff
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <HAL_RTCEx_WakeUpTimerIRQHandler+0x5c>)
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

      /* Wakeup timer callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->WakeUpTimerEventCallback(hrtc);
#else
      HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 f80c 	bl	800248c <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2221      	movs	r2, #33	@ 0x21
 8002478:	2101      	movs	r1, #1
 800247a:	5499      	strb	r1, [r3, r2]
}
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40010400 	.word	0x40010400
 8002488:	fffffb7f 	.word	0xfffffb7f

0800248c <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8002494:	46c0      	nop			@ (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <memset>:
 800249c:	0003      	movs	r3, r0
 800249e:	1882      	adds	r2, r0, r2
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d100      	bne.n	80024a6 <memset+0xa>
 80024a4:	4770      	bx	lr
 80024a6:	7019      	strb	r1, [r3, #0]
 80024a8:	3301      	adds	r3, #1
 80024aa:	e7f9      	b.n	80024a0 <memset+0x4>

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	2600      	movs	r6, #0
 80024b0:	4c0c      	ldr	r4, [pc, #48]	@ (80024e4 <__libc_init_array+0x38>)
 80024b2:	4d0d      	ldr	r5, [pc, #52]	@ (80024e8 <__libc_init_array+0x3c>)
 80024b4:	1b64      	subs	r4, r4, r5
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	42a6      	cmp	r6, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	2600      	movs	r6, #0
 80024be:	f000 f819 	bl	80024f4 <_init>
 80024c2:	4c0a      	ldr	r4, [pc, #40]	@ (80024ec <__libc_init_array+0x40>)
 80024c4:	4d0a      	ldr	r5, [pc, #40]	@ (80024f0 <__libc_init_array+0x44>)
 80024c6:	1b64      	subs	r4, r4, r5
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	42a6      	cmp	r6, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	00b3      	lsls	r3, r6, #2
 80024d2:	58eb      	ldr	r3, [r5, r3]
 80024d4:	4798      	blx	r3
 80024d6:	3601      	adds	r6, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	00b3      	lsls	r3, r6, #2
 80024dc:	58eb      	ldr	r3, [r5, r3]
 80024de:	4798      	blx	r3
 80024e0:	3601      	adds	r6, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	08002530 	.word	0x08002530
 80024e8:	08002530 	.word	0x08002530
 80024ec:	08002534 	.word	0x08002534
 80024f0:	08002530 	.word	0x08002530

080024f4 <_init>:
 80024f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024fa:	bc08      	pop	{r3}
 80024fc:	469e      	mov	lr, r3
 80024fe:	4770      	bx	lr

08002500 <_fini>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	46c0      	nop			@ (mov r8, r8)
 8002504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002506:	bc08      	pop	{r3}
 8002508:	469e      	mov	lr, r3
 800250a:	4770      	bx	lr
